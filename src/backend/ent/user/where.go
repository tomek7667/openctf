// Code generated by ent, DO NOT EDIT.

package user

import (
	"openctfbackend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailConfirmedAt applies equality check predicate on the "email_confirmed_at" field. It's identical to EmailConfirmedAtEQ.
func EmailConfirmedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmailConfirmedAt, v))
}

// ConfirmationCode applies equality check predicate on the "confirmation_code" field. It's identical to ConfirmationCodeEQ.
func ConfirmationCode(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldConfirmationCode, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDescription, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsername, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// EmailConfirmedAtEQ applies the EQ predicate on the "email_confirmed_at" field.
func EmailConfirmedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmailConfirmedAt, v))
}

// EmailConfirmedAtNEQ applies the NEQ predicate on the "email_confirmed_at" field.
func EmailConfirmedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmailConfirmedAt, v))
}

// EmailConfirmedAtIn applies the In predicate on the "email_confirmed_at" field.
func EmailConfirmedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmailConfirmedAt, vs...))
}

// EmailConfirmedAtNotIn applies the NotIn predicate on the "email_confirmed_at" field.
func EmailConfirmedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmailConfirmedAt, vs...))
}

// EmailConfirmedAtGT applies the GT predicate on the "email_confirmed_at" field.
func EmailConfirmedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmailConfirmedAt, v))
}

// EmailConfirmedAtGTE applies the GTE predicate on the "email_confirmed_at" field.
func EmailConfirmedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmailConfirmedAt, v))
}

// EmailConfirmedAtLT applies the LT predicate on the "email_confirmed_at" field.
func EmailConfirmedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmailConfirmedAt, v))
}

// EmailConfirmedAtLTE applies the LTE predicate on the "email_confirmed_at" field.
func EmailConfirmedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmailConfirmedAt, v))
}

// EmailConfirmedAtIsNil applies the IsNil predicate on the "email_confirmed_at" field.
func EmailConfirmedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldEmailConfirmedAt))
}

// EmailConfirmedAtNotNil applies the NotNil predicate on the "email_confirmed_at" field.
func EmailConfirmedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldEmailConfirmedAt))
}

// ConfirmationCodeEQ applies the EQ predicate on the "confirmation_code" field.
func ConfirmationCodeEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldConfirmationCode, v))
}

// ConfirmationCodeNEQ applies the NEQ predicate on the "confirmation_code" field.
func ConfirmationCodeNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldConfirmationCode, v))
}

// ConfirmationCodeIn applies the In predicate on the "confirmation_code" field.
func ConfirmationCodeIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldConfirmationCode, vs...))
}

// ConfirmationCodeNotIn applies the NotIn predicate on the "confirmation_code" field.
func ConfirmationCodeNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldConfirmationCode, vs...))
}

// ConfirmationCodeGT applies the GT predicate on the "confirmation_code" field.
func ConfirmationCodeGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldConfirmationCode, v))
}

// ConfirmationCodeGTE applies the GTE predicate on the "confirmation_code" field.
func ConfirmationCodeGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldConfirmationCode, v))
}

// ConfirmationCodeLT applies the LT predicate on the "confirmation_code" field.
func ConfirmationCodeLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldConfirmationCode, v))
}

// ConfirmationCodeLTE applies the LTE predicate on the "confirmation_code" field.
func ConfirmationCodeLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldConfirmationCode, v))
}

// ConfirmationCodeContains applies the Contains predicate on the "confirmation_code" field.
func ConfirmationCodeContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldConfirmationCode, v))
}

// ConfirmationCodeHasPrefix applies the HasPrefix predicate on the "confirmation_code" field.
func ConfirmationCodeHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldConfirmationCode, v))
}

// ConfirmationCodeHasSuffix applies the HasSuffix predicate on the "confirmation_code" field.
func ConfirmationCodeHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldConfirmationCode, v))
}

// ConfirmationCodeIsNil applies the IsNil predicate on the "confirmation_code" field.
func ConfirmationCodeIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldConfirmationCode))
}

// ConfirmationCodeNotNil applies the NotNil predicate on the "confirmation_code" field.
func ConfirmationCodeNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldConfirmationCode))
}

// ConfirmationCodeEqualFold applies the EqualFold predicate on the "confirmation_code" field.
func ConfirmationCodeEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldConfirmationCode, v))
}

// ConfirmationCodeContainsFold applies the ContainsFold predicate on the "confirmation_code" field.
func ConfirmationCodeContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldConfirmationCode, v))
}

// PermissionLevelEQ applies the EQ predicate on the "permission_level" field.
func PermissionLevelEQ(v PermissionLevel) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPermissionLevel, v))
}

// PermissionLevelNEQ applies the NEQ predicate on the "permission_level" field.
func PermissionLevelNEQ(v PermissionLevel) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPermissionLevel, v))
}

// PermissionLevelIn applies the In predicate on the "permission_level" field.
func PermissionLevelIn(vs ...PermissionLevel) predicate.User {
	return predicate.User(sql.FieldIn(FieldPermissionLevel, vs...))
}

// PermissionLevelNotIn applies the NotIn predicate on the "permission_level" field.
func PermissionLevelNotIn(vs ...PermissionLevel) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPermissionLevel, vs...))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldDescription, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPassword, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// HasPlayingFor applies the HasEdge predicate on the "playing_for" edge.
func HasPlayingFor() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PlayingForTable, PlayingForColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayingForWith applies the HasEdge predicate on the "playing_for" edge with a given conditions (other predicates).
func HasPlayingForWith(preds ...predicate.Team) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPlayingForStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
