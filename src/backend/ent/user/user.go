// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldEmailConfirmedAt holds the string denoting the email_confirmed_at field in the database.
	FieldEmailConfirmedAt = "email_confirmed_at"
	// FieldConfirmationCode holds the string denoting the confirmation_code field in the database.
	FieldConfirmationCode = "confirmation_code"
	// FieldPermissionLevel holds the string denoting the permission_level field in the database.
	FieldPermissionLevel = "permission_level"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the user in the database.
	Table = "users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldEmail,
	FieldEmailConfirmedAt,
	FieldConfirmationCode,
	FieldPermissionLevel,
	FieldDescription,
	FieldPassword,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"team_members",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)

// PermissionLevel defines the type for the "permission_level" enum field.
type PermissionLevel string

// PermissionLevelPlayer is the default value of the PermissionLevel enum.
const DefaultPermissionLevel = PermissionLevelPlayer

// PermissionLevel values.
const (
	PermissionLevelPlayer        PermissionLevel = "player"
	PermissionLevelModerator     PermissionLevel = "moderator"
	PermissionLevelAdministrator PermissionLevel = "administrator"
)

func (pl PermissionLevel) String() string {
	return string(pl)
}

// PermissionLevelValidator is a validator for the "permission_level" field enum values. It is called by the builders before save.
func PermissionLevelValidator(pl PermissionLevel) error {
	switch pl {
	case PermissionLevelPlayer, PermissionLevelModerator, PermissionLevelAdministrator:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for permission_level field: %q", pl)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByEmailConfirmedAt orders the results by the email_confirmed_at field.
func ByEmailConfirmedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailConfirmedAt, opts...).ToFunc()
}

// ByConfirmationCode orders the results by the confirmation_code field.
func ByConfirmationCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfirmationCode, opts...).ToFunc()
}

// ByPermissionLevel orders the results by the permission_level field.
func ByPermissionLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPermissionLevel, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
