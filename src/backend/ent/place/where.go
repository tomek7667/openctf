// Code generated by ent, DO NOT EDIT.

package place

import (
	"openctfbackend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Place {
	return predicate.Place(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Place {
	return predicate.Place(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Place {
	return predicate.Place(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Place {
	return predicate.Place(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Place {
	return predicate.Place(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Place {
	return predicate.Place(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Place {
	return predicate.Place(sql.FieldLTE(FieldID, id))
}

// TeamName applies equality check predicate on the "team_name" field. It's identical to TeamNameEQ.
func TeamName(v string) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldTeamName, v))
}

// Place applies equality check predicate on the "place" field. It's identical to PlaceEQ.
func Place(v int) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldPlace, v))
}

// ContestPoints applies equality check predicate on the "contest_points" field. It's identical to ContestPointsEQ.
func ContestPoints(v float64) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldContestPoints, v))
}

// OpenctfPoints applies equality check predicate on the "openctf_points" field. It's identical to OpenctfPointsEQ.
func OpenctfPoints(v float64) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldOpenctfPoints, v))
}

// AssociatedContestID applies equality check predicate on the "associated_contest_id" field. It's identical to AssociatedContestIDEQ.
func AssociatedContestID(v int) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldAssociatedContestID, v))
}

// AssignedWeightPoints applies equality check predicate on the "assigned_weight_points" field. It's identical to AssignedWeightPointsEQ.
func AssignedWeightPoints(v int) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldAssignedWeightPoints, v))
}

// TeamNameEQ applies the EQ predicate on the "team_name" field.
func TeamNameEQ(v string) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldTeamName, v))
}

// TeamNameNEQ applies the NEQ predicate on the "team_name" field.
func TeamNameNEQ(v string) predicate.Place {
	return predicate.Place(sql.FieldNEQ(FieldTeamName, v))
}

// TeamNameIn applies the In predicate on the "team_name" field.
func TeamNameIn(vs ...string) predicate.Place {
	return predicate.Place(sql.FieldIn(FieldTeamName, vs...))
}

// TeamNameNotIn applies the NotIn predicate on the "team_name" field.
func TeamNameNotIn(vs ...string) predicate.Place {
	return predicate.Place(sql.FieldNotIn(FieldTeamName, vs...))
}

// TeamNameGT applies the GT predicate on the "team_name" field.
func TeamNameGT(v string) predicate.Place {
	return predicate.Place(sql.FieldGT(FieldTeamName, v))
}

// TeamNameGTE applies the GTE predicate on the "team_name" field.
func TeamNameGTE(v string) predicate.Place {
	return predicate.Place(sql.FieldGTE(FieldTeamName, v))
}

// TeamNameLT applies the LT predicate on the "team_name" field.
func TeamNameLT(v string) predicate.Place {
	return predicate.Place(sql.FieldLT(FieldTeamName, v))
}

// TeamNameLTE applies the LTE predicate on the "team_name" field.
func TeamNameLTE(v string) predicate.Place {
	return predicate.Place(sql.FieldLTE(FieldTeamName, v))
}

// TeamNameContains applies the Contains predicate on the "team_name" field.
func TeamNameContains(v string) predicate.Place {
	return predicate.Place(sql.FieldContains(FieldTeamName, v))
}

// TeamNameHasPrefix applies the HasPrefix predicate on the "team_name" field.
func TeamNameHasPrefix(v string) predicate.Place {
	return predicate.Place(sql.FieldHasPrefix(FieldTeamName, v))
}

// TeamNameHasSuffix applies the HasSuffix predicate on the "team_name" field.
func TeamNameHasSuffix(v string) predicate.Place {
	return predicate.Place(sql.FieldHasSuffix(FieldTeamName, v))
}

// TeamNameEqualFold applies the EqualFold predicate on the "team_name" field.
func TeamNameEqualFold(v string) predicate.Place {
	return predicate.Place(sql.FieldEqualFold(FieldTeamName, v))
}

// TeamNameContainsFold applies the ContainsFold predicate on the "team_name" field.
func TeamNameContainsFold(v string) predicate.Place {
	return predicate.Place(sql.FieldContainsFold(FieldTeamName, v))
}

// PlaceEQ applies the EQ predicate on the "place" field.
func PlaceEQ(v int) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldPlace, v))
}

// PlaceNEQ applies the NEQ predicate on the "place" field.
func PlaceNEQ(v int) predicate.Place {
	return predicate.Place(sql.FieldNEQ(FieldPlace, v))
}

// PlaceIn applies the In predicate on the "place" field.
func PlaceIn(vs ...int) predicate.Place {
	return predicate.Place(sql.FieldIn(FieldPlace, vs...))
}

// PlaceNotIn applies the NotIn predicate on the "place" field.
func PlaceNotIn(vs ...int) predicate.Place {
	return predicate.Place(sql.FieldNotIn(FieldPlace, vs...))
}

// PlaceGT applies the GT predicate on the "place" field.
func PlaceGT(v int) predicate.Place {
	return predicate.Place(sql.FieldGT(FieldPlace, v))
}

// PlaceGTE applies the GTE predicate on the "place" field.
func PlaceGTE(v int) predicate.Place {
	return predicate.Place(sql.FieldGTE(FieldPlace, v))
}

// PlaceLT applies the LT predicate on the "place" field.
func PlaceLT(v int) predicate.Place {
	return predicate.Place(sql.FieldLT(FieldPlace, v))
}

// PlaceLTE applies the LTE predicate on the "place" field.
func PlaceLTE(v int) predicate.Place {
	return predicate.Place(sql.FieldLTE(FieldPlace, v))
}

// ContestPointsEQ applies the EQ predicate on the "contest_points" field.
func ContestPointsEQ(v float64) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldContestPoints, v))
}

// ContestPointsNEQ applies the NEQ predicate on the "contest_points" field.
func ContestPointsNEQ(v float64) predicate.Place {
	return predicate.Place(sql.FieldNEQ(FieldContestPoints, v))
}

// ContestPointsIn applies the In predicate on the "contest_points" field.
func ContestPointsIn(vs ...float64) predicate.Place {
	return predicate.Place(sql.FieldIn(FieldContestPoints, vs...))
}

// ContestPointsNotIn applies the NotIn predicate on the "contest_points" field.
func ContestPointsNotIn(vs ...float64) predicate.Place {
	return predicate.Place(sql.FieldNotIn(FieldContestPoints, vs...))
}

// ContestPointsGT applies the GT predicate on the "contest_points" field.
func ContestPointsGT(v float64) predicate.Place {
	return predicate.Place(sql.FieldGT(FieldContestPoints, v))
}

// ContestPointsGTE applies the GTE predicate on the "contest_points" field.
func ContestPointsGTE(v float64) predicate.Place {
	return predicate.Place(sql.FieldGTE(FieldContestPoints, v))
}

// ContestPointsLT applies the LT predicate on the "contest_points" field.
func ContestPointsLT(v float64) predicate.Place {
	return predicate.Place(sql.FieldLT(FieldContestPoints, v))
}

// ContestPointsLTE applies the LTE predicate on the "contest_points" field.
func ContestPointsLTE(v float64) predicate.Place {
	return predicate.Place(sql.FieldLTE(FieldContestPoints, v))
}

// ContestPointsIsNil applies the IsNil predicate on the "contest_points" field.
func ContestPointsIsNil() predicate.Place {
	return predicate.Place(sql.FieldIsNull(FieldContestPoints))
}

// ContestPointsNotNil applies the NotNil predicate on the "contest_points" field.
func ContestPointsNotNil() predicate.Place {
	return predicate.Place(sql.FieldNotNull(FieldContestPoints))
}

// OpenctfPointsEQ applies the EQ predicate on the "openctf_points" field.
func OpenctfPointsEQ(v float64) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldOpenctfPoints, v))
}

// OpenctfPointsNEQ applies the NEQ predicate on the "openctf_points" field.
func OpenctfPointsNEQ(v float64) predicate.Place {
	return predicate.Place(sql.FieldNEQ(FieldOpenctfPoints, v))
}

// OpenctfPointsIn applies the In predicate on the "openctf_points" field.
func OpenctfPointsIn(vs ...float64) predicate.Place {
	return predicate.Place(sql.FieldIn(FieldOpenctfPoints, vs...))
}

// OpenctfPointsNotIn applies the NotIn predicate on the "openctf_points" field.
func OpenctfPointsNotIn(vs ...float64) predicate.Place {
	return predicate.Place(sql.FieldNotIn(FieldOpenctfPoints, vs...))
}

// OpenctfPointsGT applies the GT predicate on the "openctf_points" field.
func OpenctfPointsGT(v float64) predicate.Place {
	return predicate.Place(sql.FieldGT(FieldOpenctfPoints, v))
}

// OpenctfPointsGTE applies the GTE predicate on the "openctf_points" field.
func OpenctfPointsGTE(v float64) predicate.Place {
	return predicate.Place(sql.FieldGTE(FieldOpenctfPoints, v))
}

// OpenctfPointsLT applies the LT predicate on the "openctf_points" field.
func OpenctfPointsLT(v float64) predicate.Place {
	return predicate.Place(sql.FieldLT(FieldOpenctfPoints, v))
}

// OpenctfPointsLTE applies the LTE predicate on the "openctf_points" field.
func OpenctfPointsLTE(v float64) predicate.Place {
	return predicate.Place(sql.FieldLTE(FieldOpenctfPoints, v))
}

// OpenctfPointsIsNil applies the IsNil predicate on the "openctf_points" field.
func OpenctfPointsIsNil() predicate.Place {
	return predicate.Place(sql.FieldIsNull(FieldOpenctfPoints))
}

// OpenctfPointsNotNil applies the NotNil predicate on the "openctf_points" field.
func OpenctfPointsNotNil() predicate.Place {
	return predicate.Place(sql.FieldNotNull(FieldOpenctfPoints))
}

// AssociatedContestIDEQ applies the EQ predicate on the "associated_contest_id" field.
func AssociatedContestIDEQ(v int) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldAssociatedContestID, v))
}

// AssociatedContestIDNEQ applies the NEQ predicate on the "associated_contest_id" field.
func AssociatedContestIDNEQ(v int) predicate.Place {
	return predicate.Place(sql.FieldNEQ(FieldAssociatedContestID, v))
}

// AssociatedContestIDIn applies the In predicate on the "associated_contest_id" field.
func AssociatedContestIDIn(vs ...int) predicate.Place {
	return predicate.Place(sql.FieldIn(FieldAssociatedContestID, vs...))
}

// AssociatedContestIDNotIn applies the NotIn predicate on the "associated_contest_id" field.
func AssociatedContestIDNotIn(vs ...int) predicate.Place {
	return predicate.Place(sql.FieldNotIn(FieldAssociatedContestID, vs...))
}

// AssignedWeightPointsEQ applies the EQ predicate on the "assigned_weight_points" field.
func AssignedWeightPointsEQ(v int) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldAssignedWeightPoints, v))
}

// AssignedWeightPointsNEQ applies the NEQ predicate on the "assigned_weight_points" field.
func AssignedWeightPointsNEQ(v int) predicate.Place {
	return predicate.Place(sql.FieldNEQ(FieldAssignedWeightPoints, v))
}

// AssignedWeightPointsIn applies the In predicate on the "assigned_weight_points" field.
func AssignedWeightPointsIn(vs ...int) predicate.Place {
	return predicate.Place(sql.FieldIn(FieldAssignedWeightPoints, vs...))
}

// AssignedWeightPointsNotIn applies the NotIn predicate on the "assigned_weight_points" field.
func AssignedWeightPointsNotIn(vs ...int) predicate.Place {
	return predicate.Place(sql.FieldNotIn(FieldAssignedWeightPoints, vs...))
}

// AssignedWeightPointsGT applies the GT predicate on the "assigned_weight_points" field.
func AssignedWeightPointsGT(v int) predicate.Place {
	return predicate.Place(sql.FieldGT(FieldAssignedWeightPoints, v))
}

// AssignedWeightPointsGTE applies the GTE predicate on the "assigned_weight_points" field.
func AssignedWeightPointsGTE(v int) predicate.Place {
	return predicate.Place(sql.FieldGTE(FieldAssignedWeightPoints, v))
}

// AssignedWeightPointsLT applies the LT predicate on the "assigned_weight_points" field.
func AssignedWeightPointsLT(v int) predicate.Place {
	return predicate.Place(sql.FieldLT(FieldAssignedWeightPoints, v))
}

// AssignedWeightPointsLTE applies the LTE predicate on the "assigned_weight_points" field.
func AssignedWeightPointsLTE(v int) predicate.Place {
	return predicate.Place(sql.FieldLTE(FieldAssignedWeightPoints, v))
}

// HasAssociatedContest applies the HasEdge predicate on the "associated_contest" edge.
func HasAssociatedContest() predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AssociatedContestTable, AssociatedContestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssociatedContestWith applies the HasEdge predicate on the "associated_contest" edge with a given conditions (other predicates).
func HasAssociatedContestWith(preds ...predicate.Contest) predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		step := newAssociatedContestStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAssociatedTeam applies the HasEdge predicate on the "associated_team" edge.
func HasAssociatedTeam() predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AssociatedTeamTable, AssociatedTeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssociatedTeamWith applies the HasEdge predicate on the "associated_team" edge with a given conditions (other predicates).
func HasAssociatedTeamWith(preds ...predicate.Team) predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		step := newAssociatedTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Place) predicate.Place {
	return predicate.Place(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Place) predicate.Place {
	return predicate.Place(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Place) predicate.Place {
	return predicate.Place(sql.NotPredicates(p))
}
