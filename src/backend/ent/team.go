// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"openctfbackend/ent/team"
	"openctfbackend/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Team is the model entity for the Team schema.
type Team struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Logo holds the value of the "logo" field.
	Logo []byte `json:"logo,omitempty"`
	// VerifiedAt holds the value of the "verified_at" field.
	VerifiedAt *time.Time `json:"verified_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TeamQuery when eager-loading is set.
	Edges            TeamEdges `json:"edges"`
	team_captain     *int
	team_verified_by *int
	user_playing_for *int
	selectValues     sql.SelectValues
}

// TeamEdges holds the relations/edges for other nodes in the graph.
type TeamEdges struct {
	// Captain holds the value of the captain edge.
	Captain *User `json:"captain,omitempty"`
	// VerifiedBy holds the value of the verified_by edge.
	VerifiedBy *User `json:"verified_by,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CaptainOrErr returns the Captain value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeamEdges) CaptainOrErr() (*User, error) {
	if e.Captain != nil {
		return e.Captain, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "captain"}
}

// VerifiedByOrErr returns the VerifiedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeamEdges) VerifiedByOrErr() (*User, error) {
	if e.VerifiedBy != nil {
		return e.VerifiedBy, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "verified_by"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Team) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case team.FieldLogo:
			values[i] = new([]byte)
		case team.FieldID:
			values[i] = new(sql.NullInt64)
		case team.FieldName, team.FieldDescription:
			values[i] = new(sql.NullString)
		case team.FieldVerifiedAt:
			values[i] = new(sql.NullTime)
		case team.ForeignKeys[0]: // team_captain
			values[i] = new(sql.NullInt64)
		case team.ForeignKeys[1]: // team_verified_by
			values[i] = new(sql.NullInt64)
		case team.ForeignKeys[2]: // user_playing_for
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Team fields.
func (t *Team) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case team.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case team.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case team.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case team.FieldLogo:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field logo", values[i])
			} else if value != nil {
				t.Logo = *value
			}
		case team.FieldVerifiedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field verified_at", values[i])
			} else if value.Valid {
				t.VerifiedAt = new(time.Time)
				*t.VerifiedAt = value.Time
			}
		case team.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field team_captain", value)
			} else if value.Valid {
				t.team_captain = new(int)
				*t.team_captain = int(value.Int64)
			}
		case team.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field team_verified_by", value)
			} else if value.Valid {
				t.team_verified_by = new(int)
				*t.team_verified_by = int(value.Int64)
			}
		case team.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_playing_for", value)
			} else if value.Valid {
				t.user_playing_for = new(int)
				*t.user_playing_for = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Team.
// This includes values selected through modifiers, order, etc.
func (t *Team) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryCaptain queries the "captain" edge of the Team entity.
func (t *Team) QueryCaptain() *UserQuery {
	return NewTeamClient(t.config).QueryCaptain(t)
}

// QueryVerifiedBy queries the "verified_by" edge of the Team entity.
func (t *Team) QueryVerifiedBy() *UserQuery {
	return NewTeamClient(t.config).QueryVerifiedBy(t)
}

// Update returns a builder for updating this Team.
// Note that you need to call Team.Unwrap() before calling this method if this Team
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Team) Update() *TeamUpdateOne {
	return NewTeamClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Team entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Team) Unwrap() *Team {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Team is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Team) String() string {
	var builder strings.Builder
	builder.WriteString("Team(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(t.Description)
	builder.WriteString(", ")
	builder.WriteString("logo=")
	builder.WriteString(fmt.Sprintf("%v", t.Logo))
	builder.WriteString(", ")
	if v := t.VerifiedAt; v != nil {
		builder.WriteString("verified_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Teams is a parsable slice of Team.
type Teams []*Team
