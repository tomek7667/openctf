// Code generated by ent, DO NOT EDIT.

package contestrating

import (
	"openctfbackend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ContestRating {
	return predicate.ContestRating(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ContestRating {
	return predicate.ContestRating(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ContestRating {
	return predicate.ContestRating(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ContestRating {
	return predicate.ContestRating(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ContestRating {
	return predicate.ContestRating(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ContestRating {
	return predicate.ContestRating(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ContestRating {
	return predicate.ContestRating(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ContestRating {
	return predicate.ContestRating(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ContestRating {
	return predicate.ContestRating(sql.FieldLTE(FieldID, id))
}

// Rating applies equality check predicate on the "rating" field. It's identical to RatingEQ.
func Rating(v int) predicate.ContestRating {
	return predicate.ContestRating(sql.FieldEQ(FieldRating, v))
}

// Relevant applies equality check predicate on the "relevant" field. It's identical to RelevantEQ.
func Relevant(v bool) predicate.ContestRating {
	return predicate.ContestRating(sql.FieldEQ(FieldRelevant, v))
}

// RatingEQ applies the EQ predicate on the "rating" field.
func RatingEQ(v int) predicate.ContestRating {
	return predicate.ContestRating(sql.FieldEQ(FieldRating, v))
}

// RatingNEQ applies the NEQ predicate on the "rating" field.
func RatingNEQ(v int) predicate.ContestRating {
	return predicate.ContestRating(sql.FieldNEQ(FieldRating, v))
}

// RatingIn applies the In predicate on the "rating" field.
func RatingIn(vs ...int) predicate.ContestRating {
	return predicate.ContestRating(sql.FieldIn(FieldRating, vs...))
}

// RatingNotIn applies the NotIn predicate on the "rating" field.
func RatingNotIn(vs ...int) predicate.ContestRating {
	return predicate.ContestRating(sql.FieldNotIn(FieldRating, vs...))
}

// RatingGT applies the GT predicate on the "rating" field.
func RatingGT(v int) predicate.ContestRating {
	return predicate.ContestRating(sql.FieldGT(FieldRating, v))
}

// RatingGTE applies the GTE predicate on the "rating" field.
func RatingGTE(v int) predicate.ContestRating {
	return predicate.ContestRating(sql.FieldGTE(FieldRating, v))
}

// RatingLT applies the LT predicate on the "rating" field.
func RatingLT(v int) predicate.ContestRating {
	return predicate.ContestRating(sql.FieldLT(FieldRating, v))
}

// RatingLTE applies the LTE predicate on the "rating" field.
func RatingLTE(v int) predicate.ContestRating {
	return predicate.ContestRating(sql.FieldLTE(FieldRating, v))
}

// RelevantEQ applies the EQ predicate on the "relevant" field.
func RelevantEQ(v bool) predicate.ContestRating {
	return predicate.ContestRating(sql.FieldEQ(FieldRelevant, v))
}

// RelevantNEQ applies the NEQ predicate on the "relevant" field.
func RelevantNEQ(v bool) predicate.ContestRating {
	return predicate.ContestRating(sql.FieldNEQ(FieldRelevant, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.ContestRating {
	return predicate.ContestRating(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.ContestRating {
	return predicate.ContestRating(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContest applies the HasEdge predicate on the "contest" edge.
func HasContest() predicate.ContestRating {
	return predicate.ContestRating(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ContestTable, ContestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContestWith applies the HasEdge predicate on the "contest" edge with a given conditions (other predicates).
func HasContestWith(preds ...predicate.Contest) predicate.ContestRating {
	return predicate.ContestRating(func(s *sql.Selector) {
		step := newContestStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ContestRating) predicate.ContestRating {
	return predicate.ContestRating(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ContestRating) predicate.ContestRating {
	return predicate.ContestRating(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ContestRating) predicate.ContestRating {
	return predicate.ContestRating(sql.NotPredicates(p))
}
