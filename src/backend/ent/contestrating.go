// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"openctfbackend/ent/contest"
	"openctfbackend/ent/contestrating"
	"openctfbackend/ent/user"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ContestRating is the model entity for the ContestRating schema.
type ContestRating struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Rating holds the value of the "rating" field.
	Rating int `json:"rating,omitempty"`
	// this will be true if the user is in a team that was participating in at least top 15%
	Relevant bool `json:"relevant,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContestRatingQuery when eager-loading is set.
	Edges                  ContestRatingEdges `json:"edges"`
	contest_rating_user    *int
	contest_rating_contest *int
	selectValues           sql.SelectValues
}

// ContestRatingEdges holds the relations/edges for other nodes in the graph.
type ContestRatingEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Contest holds the value of the contest edge.
	Contest *Contest `json:"contest,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContestRatingEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ContestOrErr returns the Contest value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContestRatingEdges) ContestOrErr() (*Contest, error) {
	if e.Contest != nil {
		return e.Contest, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: contest.Label}
	}
	return nil, &NotLoadedError{edge: "contest"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ContestRating) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case contestrating.FieldRelevant:
			values[i] = new(sql.NullBool)
		case contestrating.FieldID, contestrating.FieldRating:
			values[i] = new(sql.NullInt64)
		case contestrating.ForeignKeys[0]: // contest_rating_user
			values[i] = new(sql.NullInt64)
		case contestrating.ForeignKeys[1]: // contest_rating_contest
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ContestRating fields.
func (cr *ContestRating) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contestrating.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cr.ID = int(value.Int64)
		case contestrating.FieldRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rating", values[i])
			} else if value.Valid {
				cr.Rating = int(value.Int64)
			}
		case contestrating.FieldRelevant:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field relevant", values[i])
			} else if value.Valid {
				cr.Relevant = value.Bool
			}
		case contestrating.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field contest_rating_user", value)
			} else if value.Valid {
				cr.contest_rating_user = new(int)
				*cr.contest_rating_user = int(value.Int64)
			}
		case contestrating.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field contest_rating_contest", value)
			} else if value.Valid {
				cr.contest_rating_contest = new(int)
				*cr.contest_rating_contest = int(value.Int64)
			}
		default:
			cr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ContestRating.
// This includes values selected through modifiers, order, etc.
func (cr *ContestRating) Value(name string) (ent.Value, error) {
	return cr.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the ContestRating entity.
func (cr *ContestRating) QueryUser() *UserQuery {
	return NewContestRatingClient(cr.config).QueryUser(cr)
}

// QueryContest queries the "contest" edge of the ContestRating entity.
func (cr *ContestRating) QueryContest() *ContestQuery {
	return NewContestRatingClient(cr.config).QueryContest(cr)
}

// Update returns a builder for updating this ContestRating.
// Note that you need to call ContestRating.Unwrap() before calling this method if this ContestRating
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *ContestRating) Update() *ContestRatingUpdateOne {
	return NewContestRatingClient(cr.config).UpdateOne(cr)
}

// Unwrap unwraps the ContestRating entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cr *ContestRating) Unwrap() *ContestRating {
	_tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ContestRating is not a transactional entity")
	}
	cr.config.driver = _tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *ContestRating) String() string {
	var builder strings.Builder
	builder.WriteString("ContestRating(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cr.ID))
	builder.WriteString("rating=")
	builder.WriteString(fmt.Sprintf("%v", cr.Rating))
	builder.WriteString(", ")
	builder.WriteString("relevant=")
	builder.WriteString(fmt.Sprintf("%v", cr.Relevant))
	builder.WriteByte(')')
	return builder.String()
}

// ContestRatings is a parsable slice of ContestRating.
type ContestRatings []*ContestRating
