// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"openctfbackend/ent/place"
	"openctfbackend/ent/team"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaceCreate is the builder for creating a Place entity.
type PlaceCreate struct {
	config
	mutation *PlaceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTeamName sets the "team_name" field.
func (pc *PlaceCreate) SetTeamName(s string) *PlaceCreate {
	pc.mutation.SetTeamName(s)
	return pc
}

// SetPlace sets the "place" field.
func (pc *PlaceCreate) SetPlace(i int) *PlaceCreate {
	pc.mutation.SetPlace(i)
	return pc
}

// SetCtftimeTeamID sets the "ctftime_team_id" field.
func (pc *PlaceCreate) SetCtftimeTeamID(i int) *PlaceCreate {
	pc.mutation.SetCtftimeTeamID(i)
	return pc
}

// SetNillableCtftimeTeamID sets the "ctftime_team_id" field if the given value is not nil.
func (pc *PlaceCreate) SetNillableCtftimeTeamID(i *int) *PlaceCreate {
	if i != nil {
		pc.SetCtftimeTeamID(*i)
	}
	return pc
}

// SetContestPoints sets the "contest_points" field.
func (pc *PlaceCreate) SetContestPoints(f float64) *PlaceCreate {
	pc.mutation.SetContestPoints(f)
	return pc
}

// SetNillableContestPoints sets the "contest_points" field if the given value is not nil.
func (pc *PlaceCreate) SetNillableContestPoints(f *float64) *PlaceCreate {
	if f != nil {
		pc.SetContestPoints(*f)
	}
	return pc
}

// SetOpenctfPoints sets the "openctf_points" field.
func (pc *PlaceCreate) SetOpenctfPoints(f float64) *PlaceCreate {
	pc.mutation.SetOpenctfPoints(f)
	return pc
}

// SetNillableOpenctfPoints sets the "openctf_points" field if the given value is not nil.
func (pc *PlaceCreate) SetNillableOpenctfPoints(f *float64) *PlaceCreate {
	if f != nil {
		pc.SetOpenctfPoints(*f)
	}
	return pc
}

// SetAssociatedContestID sets the "associated_contest_id" field.
func (pc *PlaceCreate) SetAssociatedContestID(i int) *PlaceCreate {
	pc.mutation.SetAssociatedContestID(i)
	return pc
}

// SetAssignedWeightPoints sets the "assigned_weight_points" field.
func (pc *PlaceCreate) SetAssignedWeightPoints(i int) *PlaceCreate {
	pc.mutation.SetAssignedWeightPoints(i)
	return pc
}

// SetNillableAssignedWeightPoints sets the "assigned_weight_points" field if the given value is not nil.
func (pc *PlaceCreate) SetNillableAssignedWeightPoints(i *int) *PlaceCreate {
	if i != nil {
		pc.SetAssignedWeightPoints(*i)
	}
	return pc
}

// SetAssociatedTeamID sets the "associated_team" edge to the Team entity by ID.
func (pc *PlaceCreate) SetAssociatedTeamID(id int) *PlaceCreate {
	pc.mutation.SetAssociatedTeamID(id)
	return pc
}

// SetNillableAssociatedTeamID sets the "associated_team" edge to the Team entity by ID if the given value is not nil.
func (pc *PlaceCreate) SetNillableAssociatedTeamID(id *int) *PlaceCreate {
	if id != nil {
		pc = pc.SetAssociatedTeamID(*id)
	}
	return pc
}

// SetAssociatedTeam sets the "associated_team" edge to the Team entity.
func (pc *PlaceCreate) SetAssociatedTeam(t *Team) *PlaceCreate {
	return pc.SetAssociatedTeamID(t.ID)
}

// Mutation returns the PlaceMutation object of the builder.
func (pc *PlaceCreate) Mutation() *PlaceMutation {
	return pc.mutation
}

// Save creates the Place in the database.
func (pc *PlaceCreate) Save(ctx context.Context) (*Place, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlaceCreate) SaveX(ctx context.Context) *Place {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PlaceCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PlaceCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PlaceCreate) defaults() {
	if _, ok := pc.mutation.AssignedWeightPoints(); !ok {
		v := place.DefaultAssignedWeightPoints
		pc.mutation.SetAssignedWeightPoints(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PlaceCreate) check() error {
	if _, ok := pc.mutation.TeamName(); !ok {
		return &ValidationError{Name: "team_name", err: errors.New(`ent: missing required field "Place.team_name"`)}
	}
	if v, ok := pc.mutation.TeamName(); ok {
		if err := place.TeamNameValidator(v); err != nil {
			return &ValidationError{Name: "team_name", err: fmt.Errorf(`ent: validator failed for field "Place.team_name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Place(); !ok {
		return &ValidationError{Name: "place", err: errors.New(`ent: missing required field "Place.place"`)}
	}
	if v, ok := pc.mutation.Place(); ok {
		if err := place.PlaceValidator(v); err != nil {
			return &ValidationError{Name: "place", err: fmt.Errorf(`ent: validator failed for field "Place.place": %w`, err)}
		}
	}
	if v, ok := pc.mutation.ContestPoints(); ok {
		if err := place.ContestPointsValidator(v); err != nil {
			return &ValidationError{Name: "contest_points", err: fmt.Errorf(`ent: validator failed for field "Place.contest_points": %w`, err)}
		}
	}
	if v, ok := pc.mutation.OpenctfPoints(); ok {
		if err := place.OpenctfPointsValidator(v); err != nil {
			return &ValidationError{Name: "openctf_points", err: fmt.Errorf(`ent: validator failed for field "Place.openctf_points": %w`, err)}
		}
	}
	if _, ok := pc.mutation.AssociatedContestID(); !ok {
		return &ValidationError{Name: "associated_contest_id", err: errors.New(`ent: missing required field "Place.associated_contest_id"`)}
	}
	if _, ok := pc.mutation.AssignedWeightPoints(); !ok {
		return &ValidationError{Name: "assigned_weight_points", err: errors.New(`ent: missing required field "Place.assigned_weight_points"`)}
	}
	return nil
}

func (pc *PlaceCreate) sqlSave(ctx context.Context) (*Place, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PlaceCreate) createSpec() (*Place, *sqlgraph.CreateSpec) {
	var (
		_node = &Place{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(place.Table, sqlgraph.NewFieldSpec(place.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.TeamName(); ok {
		_spec.SetField(place.FieldTeamName, field.TypeString, value)
		_node.TeamName = value
	}
	if value, ok := pc.mutation.Place(); ok {
		_spec.SetField(place.FieldPlace, field.TypeInt, value)
		_node.Place = value
	}
	if value, ok := pc.mutation.CtftimeTeamID(); ok {
		_spec.SetField(place.FieldCtftimeTeamID, field.TypeInt, value)
		_node.CtftimeTeamID = &value
	}
	if value, ok := pc.mutation.ContestPoints(); ok {
		_spec.SetField(place.FieldContestPoints, field.TypeFloat64, value)
		_node.ContestPoints = &value
	}
	if value, ok := pc.mutation.OpenctfPoints(); ok {
		_spec.SetField(place.FieldOpenctfPoints, field.TypeFloat64, value)
		_node.OpenctfPoints = &value
	}
	if value, ok := pc.mutation.AssociatedContestID(); ok {
		_spec.SetField(place.FieldAssociatedContestID, field.TypeInt, value)
		_node.AssociatedContestID = value
	}
	if value, ok := pc.mutation.AssignedWeightPoints(); ok {
		_spec.SetField(place.FieldAssignedWeightPoints, field.TypeInt, value)
		_node.AssignedWeightPoints = value
	}
	if nodes := pc.mutation.AssociatedTeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   place.AssociatedTeamTable,
			Columns: []string{place.AssociatedTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.place_associated_team = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Place.Create().
//		SetTeamName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlaceUpsert) {
//			SetTeamName(v+v).
//		}).
//		Exec(ctx)
func (pc *PlaceCreate) OnConflict(opts ...sql.ConflictOption) *PlaceUpsertOne {
	pc.conflict = opts
	return &PlaceUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Place.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PlaceCreate) OnConflictColumns(columns ...string) *PlaceUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PlaceUpsertOne{
		create: pc,
	}
}

type (
	// PlaceUpsertOne is the builder for "upsert"-ing
	//  one Place node.
	PlaceUpsertOne struct {
		create *PlaceCreate
	}

	// PlaceUpsert is the "OnConflict" setter.
	PlaceUpsert struct {
		*sql.UpdateSet
	}
)

// SetTeamName sets the "team_name" field.
func (u *PlaceUpsert) SetTeamName(v string) *PlaceUpsert {
	u.Set(place.FieldTeamName, v)
	return u
}

// UpdateTeamName sets the "team_name" field to the value that was provided on create.
func (u *PlaceUpsert) UpdateTeamName() *PlaceUpsert {
	u.SetExcluded(place.FieldTeamName)
	return u
}

// SetPlace sets the "place" field.
func (u *PlaceUpsert) SetPlace(v int) *PlaceUpsert {
	u.Set(place.FieldPlace, v)
	return u
}

// UpdatePlace sets the "place" field to the value that was provided on create.
func (u *PlaceUpsert) UpdatePlace() *PlaceUpsert {
	u.SetExcluded(place.FieldPlace)
	return u
}

// AddPlace adds v to the "place" field.
func (u *PlaceUpsert) AddPlace(v int) *PlaceUpsert {
	u.Add(place.FieldPlace, v)
	return u
}

// SetCtftimeTeamID sets the "ctftime_team_id" field.
func (u *PlaceUpsert) SetCtftimeTeamID(v int) *PlaceUpsert {
	u.Set(place.FieldCtftimeTeamID, v)
	return u
}

// UpdateCtftimeTeamID sets the "ctftime_team_id" field to the value that was provided on create.
func (u *PlaceUpsert) UpdateCtftimeTeamID() *PlaceUpsert {
	u.SetExcluded(place.FieldCtftimeTeamID)
	return u
}

// AddCtftimeTeamID adds v to the "ctftime_team_id" field.
func (u *PlaceUpsert) AddCtftimeTeamID(v int) *PlaceUpsert {
	u.Add(place.FieldCtftimeTeamID, v)
	return u
}

// ClearCtftimeTeamID clears the value of the "ctftime_team_id" field.
func (u *PlaceUpsert) ClearCtftimeTeamID() *PlaceUpsert {
	u.SetNull(place.FieldCtftimeTeamID)
	return u
}

// SetContestPoints sets the "contest_points" field.
func (u *PlaceUpsert) SetContestPoints(v float64) *PlaceUpsert {
	u.Set(place.FieldContestPoints, v)
	return u
}

// UpdateContestPoints sets the "contest_points" field to the value that was provided on create.
func (u *PlaceUpsert) UpdateContestPoints() *PlaceUpsert {
	u.SetExcluded(place.FieldContestPoints)
	return u
}

// AddContestPoints adds v to the "contest_points" field.
func (u *PlaceUpsert) AddContestPoints(v float64) *PlaceUpsert {
	u.Add(place.FieldContestPoints, v)
	return u
}

// ClearContestPoints clears the value of the "contest_points" field.
func (u *PlaceUpsert) ClearContestPoints() *PlaceUpsert {
	u.SetNull(place.FieldContestPoints)
	return u
}

// SetOpenctfPoints sets the "openctf_points" field.
func (u *PlaceUpsert) SetOpenctfPoints(v float64) *PlaceUpsert {
	u.Set(place.FieldOpenctfPoints, v)
	return u
}

// UpdateOpenctfPoints sets the "openctf_points" field to the value that was provided on create.
func (u *PlaceUpsert) UpdateOpenctfPoints() *PlaceUpsert {
	u.SetExcluded(place.FieldOpenctfPoints)
	return u
}

// AddOpenctfPoints adds v to the "openctf_points" field.
func (u *PlaceUpsert) AddOpenctfPoints(v float64) *PlaceUpsert {
	u.Add(place.FieldOpenctfPoints, v)
	return u
}

// ClearOpenctfPoints clears the value of the "openctf_points" field.
func (u *PlaceUpsert) ClearOpenctfPoints() *PlaceUpsert {
	u.SetNull(place.FieldOpenctfPoints)
	return u
}

// SetAssociatedContestID sets the "associated_contest_id" field.
func (u *PlaceUpsert) SetAssociatedContestID(v int) *PlaceUpsert {
	u.Set(place.FieldAssociatedContestID, v)
	return u
}

// UpdateAssociatedContestID sets the "associated_contest_id" field to the value that was provided on create.
func (u *PlaceUpsert) UpdateAssociatedContestID() *PlaceUpsert {
	u.SetExcluded(place.FieldAssociatedContestID)
	return u
}

// AddAssociatedContestID adds v to the "associated_contest_id" field.
func (u *PlaceUpsert) AddAssociatedContestID(v int) *PlaceUpsert {
	u.Add(place.FieldAssociatedContestID, v)
	return u
}

// SetAssignedWeightPoints sets the "assigned_weight_points" field.
func (u *PlaceUpsert) SetAssignedWeightPoints(v int) *PlaceUpsert {
	u.Set(place.FieldAssignedWeightPoints, v)
	return u
}

// UpdateAssignedWeightPoints sets the "assigned_weight_points" field to the value that was provided on create.
func (u *PlaceUpsert) UpdateAssignedWeightPoints() *PlaceUpsert {
	u.SetExcluded(place.FieldAssignedWeightPoints)
	return u
}

// AddAssignedWeightPoints adds v to the "assigned_weight_points" field.
func (u *PlaceUpsert) AddAssignedWeightPoints(v int) *PlaceUpsert {
	u.Add(place.FieldAssignedWeightPoints, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Place.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PlaceUpsertOne) UpdateNewValues() *PlaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Place.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PlaceUpsertOne) Ignore() *PlaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlaceUpsertOne) DoNothing() *PlaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlaceCreate.OnConflict
// documentation for more info.
func (u *PlaceUpsertOne) Update(set func(*PlaceUpsert)) *PlaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlaceUpsert{UpdateSet: update})
	}))
	return u
}

// SetTeamName sets the "team_name" field.
func (u *PlaceUpsertOne) SetTeamName(v string) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetTeamName(v)
	})
}

// UpdateTeamName sets the "team_name" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdateTeamName() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateTeamName()
	})
}

// SetPlace sets the "place" field.
func (u *PlaceUpsertOne) SetPlace(v int) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetPlace(v)
	})
}

// AddPlace adds v to the "place" field.
func (u *PlaceUpsertOne) AddPlace(v int) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.AddPlace(v)
	})
}

// UpdatePlace sets the "place" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdatePlace() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdatePlace()
	})
}

// SetCtftimeTeamID sets the "ctftime_team_id" field.
func (u *PlaceUpsertOne) SetCtftimeTeamID(v int) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetCtftimeTeamID(v)
	})
}

// AddCtftimeTeamID adds v to the "ctftime_team_id" field.
func (u *PlaceUpsertOne) AddCtftimeTeamID(v int) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.AddCtftimeTeamID(v)
	})
}

// UpdateCtftimeTeamID sets the "ctftime_team_id" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdateCtftimeTeamID() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateCtftimeTeamID()
	})
}

// ClearCtftimeTeamID clears the value of the "ctftime_team_id" field.
func (u *PlaceUpsertOne) ClearCtftimeTeamID() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearCtftimeTeamID()
	})
}

// SetContestPoints sets the "contest_points" field.
func (u *PlaceUpsertOne) SetContestPoints(v float64) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetContestPoints(v)
	})
}

// AddContestPoints adds v to the "contest_points" field.
func (u *PlaceUpsertOne) AddContestPoints(v float64) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.AddContestPoints(v)
	})
}

// UpdateContestPoints sets the "contest_points" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdateContestPoints() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateContestPoints()
	})
}

// ClearContestPoints clears the value of the "contest_points" field.
func (u *PlaceUpsertOne) ClearContestPoints() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearContestPoints()
	})
}

// SetOpenctfPoints sets the "openctf_points" field.
func (u *PlaceUpsertOne) SetOpenctfPoints(v float64) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetOpenctfPoints(v)
	})
}

// AddOpenctfPoints adds v to the "openctf_points" field.
func (u *PlaceUpsertOne) AddOpenctfPoints(v float64) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.AddOpenctfPoints(v)
	})
}

// UpdateOpenctfPoints sets the "openctf_points" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdateOpenctfPoints() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateOpenctfPoints()
	})
}

// ClearOpenctfPoints clears the value of the "openctf_points" field.
func (u *PlaceUpsertOne) ClearOpenctfPoints() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearOpenctfPoints()
	})
}

// SetAssociatedContestID sets the "associated_contest_id" field.
func (u *PlaceUpsertOne) SetAssociatedContestID(v int) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetAssociatedContestID(v)
	})
}

// AddAssociatedContestID adds v to the "associated_contest_id" field.
func (u *PlaceUpsertOne) AddAssociatedContestID(v int) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.AddAssociatedContestID(v)
	})
}

// UpdateAssociatedContestID sets the "associated_contest_id" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdateAssociatedContestID() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateAssociatedContestID()
	})
}

// SetAssignedWeightPoints sets the "assigned_weight_points" field.
func (u *PlaceUpsertOne) SetAssignedWeightPoints(v int) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.SetAssignedWeightPoints(v)
	})
}

// AddAssignedWeightPoints adds v to the "assigned_weight_points" field.
func (u *PlaceUpsertOne) AddAssignedWeightPoints(v int) *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.AddAssignedWeightPoints(v)
	})
}

// UpdateAssignedWeightPoints sets the "assigned_weight_points" field to the value that was provided on create.
func (u *PlaceUpsertOne) UpdateAssignedWeightPoints() *PlaceUpsertOne {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateAssignedWeightPoints()
	})
}

// Exec executes the query.
func (u *PlaceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlaceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlaceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PlaceUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PlaceUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PlaceCreateBulk is the builder for creating many Place entities in bulk.
type PlaceCreateBulk struct {
	config
	err      error
	builders []*PlaceCreate
	conflict []sql.ConflictOption
}

// Save creates the Place entities in the database.
func (pcb *PlaceCreateBulk) Save(ctx context.Context) ([]*Place, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Place, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlaceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PlaceCreateBulk) SaveX(ctx context.Context) []*Place {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PlaceCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PlaceCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Place.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlaceUpsert) {
//			SetTeamName(v+v).
//		}).
//		Exec(ctx)
func (pcb *PlaceCreateBulk) OnConflict(opts ...sql.ConflictOption) *PlaceUpsertBulk {
	pcb.conflict = opts
	return &PlaceUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Place.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PlaceCreateBulk) OnConflictColumns(columns ...string) *PlaceUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PlaceUpsertBulk{
		create: pcb,
	}
}

// PlaceUpsertBulk is the builder for "upsert"-ing
// a bulk of Place nodes.
type PlaceUpsertBulk struct {
	create *PlaceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Place.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PlaceUpsertBulk) UpdateNewValues() *PlaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Place.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PlaceUpsertBulk) Ignore() *PlaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlaceUpsertBulk) DoNothing() *PlaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlaceCreateBulk.OnConflict
// documentation for more info.
func (u *PlaceUpsertBulk) Update(set func(*PlaceUpsert)) *PlaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlaceUpsert{UpdateSet: update})
	}))
	return u
}

// SetTeamName sets the "team_name" field.
func (u *PlaceUpsertBulk) SetTeamName(v string) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetTeamName(v)
	})
}

// UpdateTeamName sets the "team_name" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdateTeamName() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateTeamName()
	})
}

// SetPlace sets the "place" field.
func (u *PlaceUpsertBulk) SetPlace(v int) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetPlace(v)
	})
}

// AddPlace adds v to the "place" field.
func (u *PlaceUpsertBulk) AddPlace(v int) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.AddPlace(v)
	})
}

// UpdatePlace sets the "place" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdatePlace() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdatePlace()
	})
}

// SetCtftimeTeamID sets the "ctftime_team_id" field.
func (u *PlaceUpsertBulk) SetCtftimeTeamID(v int) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetCtftimeTeamID(v)
	})
}

// AddCtftimeTeamID adds v to the "ctftime_team_id" field.
func (u *PlaceUpsertBulk) AddCtftimeTeamID(v int) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.AddCtftimeTeamID(v)
	})
}

// UpdateCtftimeTeamID sets the "ctftime_team_id" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdateCtftimeTeamID() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateCtftimeTeamID()
	})
}

// ClearCtftimeTeamID clears the value of the "ctftime_team_id" field.
func (u *PlaceUpsertBulk) ClearCtftimeTeamID() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearCtftimeTeamID()
	})
}

// SetContestPoints sets the "contest_points" field.
func (u *PlaceUpsertBulk) SetContestPoints(v float64) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetContestPoints(v)
	})
}

// AddContestPoints adds v to the "contest_points" field.
func (u *PlaceUpsertBulk) AddContestPoints(v float64) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.AddContestPoints(v)
	})
}

// UpdateContestPoints sets the "contest_points" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdateContestPoints() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateContestPoints()
	})
}

// ClearContestPoints clears the value of the "contest_points" field.
func (u *PlaceUpsertBulk) ClearContestPoints() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearContestPoints()
	})
}

// SetOpenctfPoints sets the "openctf_points" field.
func (u *PlaceUpsertBulk) SetOpenctfPoints(v float64) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetOpenctfPoints(v)
	})
}

// AddOpenctfPoints adds v to the "openctf_points" field.
func (u *PlaceUpsertBulk) AddOpenctfPoints(v float64) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.AddOpenctfPoints(v)
	})
}

// UpdateOpenctfPoints sets the "openctf_points" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdateOpenctfPoints() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateOpenctfPoints()
	})
}

// ClearOpenctfPoints clears the value of the "openctf_points" field.
func (u *PlaceUpsertBulk) ClearOpenctfPoints() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.ClearOpenctfPoints()
	})
}

// SetAssociatedContestID sets the "associated_contest_id" field.
func (u *PlaceUpsertBulk) SetAssociatedContestID(v int) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetAssociatedContestID(v)
	})
}

// AddAssociatedContestID adds v to the "associated_contest_id" field.
func (u *PlaceUpsertBulk) AddAssociatedContestID(v int) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.AddAssociatedContestID(v)
	})
}

// UpdateAssociatedContestID sets the "associated_contest_id" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdateAssociatedContestID() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateAssociatedContestID()
	})
}

// SetAssignedWeightPoints sets the "assigned_weight_points" field.
func (u *PlaceUpsertBulk) SetAssignedWeightPoints(v int) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.SetAssignedWeightPoints(v)
	})
}

// AddAssignedWeightPoints adds v to the "assigned_weight_points" field.
func (u *PlaceUpsertBulk) AddAssignedWeightPoints(v int) *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.AddAssignedWeightPoints(v)
	})
}

// UpdateAssignedWeightPoints sets the "assigned_weight_points" field to the value that was provided on create.
func (u *PlaceUpsertBulk) UpdateAssignedWeightPoints() *PlaceUpsertBulk {
	return u.Update(func(s *PlaceUpsert) {
		s.UpdateAssignedWeightPoints()
	})
}

// Exec executes the query.
func (u *PlaceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PlaceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlaceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlaceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
