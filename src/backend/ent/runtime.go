// Code generated by ent, DO NOT EDIT.

package ent

import (
	"openctfbackend/ent/contest"
	"openctfbackend/ent/contestrating"
	"openctfbackend/ent/place"
	"openctfbackend/ent/schema"
	"openctfbackend/ent/team"
	"openctfbackend/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	contestFields := schema.Contest{}.Fields()
	_ = contestFields
	// contestDescName is the schema descriptor for name field.
	contestDescName := contestFields[0].Descriptor()
	// contest.NameValidator is a validator for the "name" field. It is called by the builders before save.
	contest.NameValidator = contestDescName.Validators[0].(func(string) error)
	// contestDescURL is the schema descriptor for url field.
	contestDescURL := contestFields[6].Descriptor()
	// contest.URLValidator is a validator for the "url" field. It is called by the builders before save.
	contest.URLValidator = contestDescURL.Validators[0].(func(string) error)
	// contestDescAssignedWeightPoints is the schema descriptor for assigned_weight_points field.
	contestDescAssignedWeightPoints := contestFields[8].Descriptor()
	// contest.DefaultAssignedWeightPoints holds the default value on creation for the assigned_weight_points field.
	contest.DefaultAssignedWeightPoints = contestDescAssignedWeightPoints.Default.(int)
	contestratingFields := schema.ContestRating{}.Fields()
	_ = contestratingFields
	// contestratingDescRating is the schema descriptor for rating field.
	contestratingDescRating := contestratingFields[0].Descriptor()
	// contestrating.RatingValidator is a validator for the "rating" field. It is called by the builders before save.
	contestrating.RatingValidator = func() func(int) error {
		validators := contestratingDescRating.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(rating int) error {
			for _, fn := range fns {
				if err := fn(rating); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// contestratingDescRelevant is the schema descriptor for relevant field.
	contestratingDescRelevant := contestratingFields[1].Descriptor()
	// contestrating.DefaultRelevant holds the default value on creation for the relevant field.
	contestrating.DefaultRelevant = contestratingDescRelevant.Default.(bool)
	placeFields := schema.Place{}.Fields()
	_ = placeFields
	// placeDescTeamName is the schema descriptor for team_name field.
	placeDescTeamName := placeFields[0].Descriptor()
	// place.TeamNameValidator is a validator for the "team_name" field. It is called by the builders before save.
	place.TeamNameValidator = placeDescTeamName.Validators[0].(func(string) error)
	// placeDescPlace is the schema descriptor for place field.
	placeDescPlace := placeFields[1].Descriptor()
	// place.PlaceValidator is a validator for the "place" field. It is called by the builders before save.
	place.PlaceValidator = placeDescPlace.Validators[0].(func(int) error)
	// placeDescContestPoints is the schema descriptor for contest_points field.
	placeDescContestPoints := placeFields[3].Descriptor()
	// place.ContestPointsValidator is a validator for the "contest_points" field. It is called by the builders before save.
	place.ContestPointsValidator = placeDescContestPoints.Validators[0].(func(float64) error)
	// placeDescOpenctfPoints is the schema descriptor for openctf_points field.
	placeDescOpenctfPoints := placeFields[4].Descriptor()
	// place.OpenctfPointsValidator is a validator for the "openctf_points" field. It is called by the builders before save.
	place.OpenctfPointsValidator = placeDescOpenctfPoints.Validators[0].(func(float64) error)
	// placeDescAssignedWeightPoints is the schema descriptor for assigned_weight_points field.
	placeDescAssignedWeightPoints := placeFields[6].Descriptor()
	// place.DefaultAssignedWeightPoints holds the default value on creation for the assigned_weight_points field.
	place.DefaultAssignedWeightPoints = placeDescAssignedWeightPoints.Default.(int)
	teamFields := schema.Team{}.Fields()
	_ = teamFields
	// teamDescLogo is the schema descriptor for logo field.
	teamDescLogo := teamFields[4].Descriptor()
	// team.LogoValidator is a validator for the "logo" field. It is called by the builders before save.
	team.LogoValidator = teamDescLogo.Validators[0].(func([]byte) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[0].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[7].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(time.Time)
}
