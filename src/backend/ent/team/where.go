// Code generated by ent, DO NOT EDIT.

package team

import (
	"openctfbackend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldDescription, v))
}

// CtftimeID applies equality check predicate on the "ctftime_id" field. It's identical to CtftimeIDEQ.
func CtftimeID(v int) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldCtftimeID, v))
}

// CtftimeVerifiedAt applies equality check predicate on the "ctftime_verified_at" field. It's identical to CtftimeVerifiedAtEQ.
func CtftimeVerifiedAt(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldCtftimeVerifiedAt, v))
}

// Logo applies equality check predicate on the "logo" field. It's identical to LogoEQ.
func Logo(v []byte) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldLogo, v))
}

// VerifiedAt applies equality check predicate on the "verified_at" field. It's identical to VerifiedAtEQ.
func VerifiedAt(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldVerifiedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Team {
	return predicate.Team(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Team {
	return predicate.Team(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Team {
	return predicate.Team(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Team {
	return predicate.Team(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Team {
	return predicate.Team(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Team {
	return predicate.Team(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Team {
	return predicate.Team(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Team {
	return predicate.Team(sql.FieldContainsFold(FieldDescription, v))
}

// CtftimeIDEQ applies the EQ predicate on the "ctftime_id" field.
func CtftimeIDEQ(v int) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldCtftimeID, v))
}

// CtftimeIDNEQ applies the NEQ predicate on the "ctftime_id" field.
func CtftimeIDNEQ(v int) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldCtftimeID, v))
}

// CtftimeIDIn applies the In predicate on the "ctftime_id" field.
func CtftimeIDIn(vs ...int) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldCtftimeID, vs...))
}

// CtftimeIDNotIn applies the NotIn predicate on the "ctftime_id" field.
func CtftimeIDNotIn(vs ...int) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldCtftimeID, vs...))
}

// CtftimeIDGT applies the GT predicate on the "ctftime_id" field.
func CtftimeIDGT(v int) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldCtftimeID, v))
}

// CtftimeIDGTE applies the GTE predicate on the "ctftime_id" field.
func CtftimeIDGTE(v int) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldCtftimeID, v))
}

// CtftimeIDLT applies the LT predicate on the "ctftime_id" field.
func CtftimeIDLT(v int) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldCtftimeID, v))
}

// CtftimeIDLTE applies the LTE predicate on the "ctftime_id" field.
func CtftimeIDLTE(v int) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldCtftimeID, v))
}

// CtftimeIDIsNil applies the IsNil predicate on the "ctftime_id" field.
func CtftimeIDIsNil() predicate.Team {
	return predicate.Team(sql.FieldIsNull(FieldCtftimeID))
}

// CtftimeIDNotNil applies the NotNil predicate on the "ctftime_id" field.
func CtftimeIDNotNil() predicate.Team {
	return predicate.Team(sql.FieldNotNull(FieldCtftimeID))
}

// CtftimeVerifiedAtEQ applies the EQ predicate on the "ctftime_verified_at" field.
func CtftimeVerifiedAtEQ(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldCtftimeVerifiedAt, v))
}

// CtftimeVerifiedAtNEQ applies the NEQ predicate on the "ctftime_verified_at" field.
func CtftimeVerifiedAtNEQ(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldCtftimeVerifiedAt, v))
}

// CtftimeVerifiedAtIn applies the In predicate on the "ctftime_verified_at" field.
func CtftimeVerifiedAtIn(vs ...time.Time) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldCtftimeVerifiedAt, vs...))
}

// CtftimeVerifiedAtNotIn applies the NotIn predicate on the "ctftime_verified_at" field.
func CtftimeVerifiedAtNotIn(vs ...time.Time) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldCtftimeVerifiedAt, vs...))
}

// CtftimeVerifiedAtGT applies the GT predicate on the "ctftime_verified_at" field.
func CtftimeVerifiedAtGT(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldCtftimeVerifiedAt, v))
}

// CtftimeVerifiedAtGTE applies the GTE predicate on the "ctftime_verified_at" field.
func CtftimeVerifiedAtGTE(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldCtftimeVerifiedAt, v))
}

// CtftimeVerifiedAtLT applies the LT predicate on the "ctftime_verified_at" field.
func CtftimeVerifiedAtLT(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldCtftimeVerifiedAt, v))
}

// CtftimeVerifiedAtLTE applies the LTE predicate on the "ctftime_verified_at" field.
func CtftimeVerifiedAtLTE(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldCtftimeVerifiedAt, v))
}

// CtftimeVerifiedAtIsNil applies the IsNil predicate on the "ctftime_verified_at" field.
func CtftimeVerifiedAtIsNil() predicate.Team {
	return predicate.Team(sql.FieldIsNull(FieldCtftimeVerifiedAt))
}

// CtftimeVerifiedAtNotNil applies the NotNil predicate on the "ctftime_verified_at" field.
func CtftimeVerifiedAtNotNil() predicate.Team {
	return predicate.Team(sql.FieldNotNull(FieldCtftimeVerifiedAt))
}

// LogoEQ applies the EQ predicate on the "logo" field.
func LogoEQ(v []byte) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldLogo, v))
}

// LogoNEQ applies the NEQ predicate on the "logo" field.
func LogoNEQ(v []byte) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldLogo, v))
}

// LogoIn applies the In predicate on the "logo" field.
func LogoIn(vs ...[]byte) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldLogo, vs...))
}

// LogoNotIn applies the NotIn predicate on the "logo" field.
func LogoNotIn(vs ...[]byte) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldLogo, vs...))
}

// LogoGT applies the GT predicate on the "logo" field.
func LogoGT(v []byte) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldLogo, v))
}

// LogoGTE applies the GTE predicate on the "logo" field.
func LogoGTE(v []byte) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldLogo, v))
}

// LogoLT applies the LT predicate on the "logo" field.
func LogoLT(v []byte) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldLogo, v))
}

// LogoLTE applies the LTE predicate on the "logo" field.
func LogoLTE(v []byte) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldLogo, v))
}

// LogoIsNil applies the IsNil predicate on the "logo" field.
func LogoIsNil() predicate.Team {
	return predicate.Team(sql.FieldIsNull(FieldLogo))
}

// LogoNotNil applies the NotNil predicate on the "logo" field.
func LogoNotNil() predicate.Team {
	return predicate.Team(sql.FieldNotNull(FieldLogo))
}

// VerifiedAtEQ applies the EQ predicate on the "verified_at" field.
func VerifiedAtEQ(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldVerifiedAt, v))
}

// VerifiedAtNEQ applies the NEQ predicate on the "verified_at" field.
func VerifiedAtNEQ(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldVerifiedAt, v))
}

// VerifiedAtIn applies the In predicate on the "verified_at" field.
func VerifiedAtIn(vs ...time.Time) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldVerifiedAt, vs...))
}

// VerifiedAtNotIn applies the NotIn predicate on the "verified_at" field.
func VerifiedAtNotIn(vs ...time.Time) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldVerifiedAt, vs...))
}

// VerifiedAtGT applies the GT predicate on the "verified_at" field.
func VerifiedAtGT(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldVerifiedAt, v))
}

// VerifiedAtGTE applies the GTE predicate on the "verified_at" field.
func VerifiedAtGTE(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldVerifiedAt, v))
}

// VerifiedAtLT applies the LT predicate on the "verified_at" field.
func VerifiedAtLT(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldVerifiedAt, v))
}

// VerifiedAtLTE applies the LTE predicate on the "verified_at" field.
func VerifiedAtLTE(v time.Time) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldVerifiedAt, v))
}

// VerifiedAtIsNil applies the IsNil predicate on the "verified_at" field.
func VerifiedAtIsNil() predicate.Team {
	return predicate.Team(sql.FieldIsNull(FieldVerifiedAt))
}

// VerifiedAtNotNil applies the NotNil predicate on the "verified_at" field.
func VerifiedAtNotNil() predicate.Team {
	return predicate.Team(sql.FieldNotNull(FieldVerifiedAt))
}

// HasCaptain applies the HasEdge predicate on the "captain" edge.
func HasCaptain() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CaptainTable, CaptainColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCaptainWith applies the HasEdge predicate on the "captain" edge with a given conditions (other predicates).
func HasCaptainWith(preds ...predicate.User) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newCaptainStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVerifiedBy applies the HasEdge predicate on the "verified_by" edge.
func HasVerifiedBy() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, VerifiedByTable, VerifiedByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVerifiedByWith applies the HasEdge predicate on the "verified_by" edge with a given conditions (other predicates).
func HasVerifiedByWith(preds ...predicate.User) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newVerifiedByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMembers applies the HasEdge predicate on the "members" edge.
func HasMembers() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MembersTable, MembersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMembersWith applies the HasEdge predicate on the "members" edge with a given conditions (other predicates).
func HasMembersWith(preds ...predicate.User) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newMembersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Team) predicate.Team {
	return predicate.Team(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Team) predicate.Team {
	return predicate.Team(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Team) predicate.Team {
	return predicate.Team(sql.NotPredicates(p))
}
