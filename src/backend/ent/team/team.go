// Code generated by ent, DO NOT EDIT.

package team

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the team type in the database.
	Label = "team"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLogo holds the string denoting the logo field in the database.
	FieldLogo = "logo"
	// FieldConfirmedAt holds the string denoting the confirmed_at field in the database.
	FieldConfirmedAt = "confirmed_at"
	// EdgeCaptain holds the string denoting the captain edge name in mutations.
	EdgeCaptain = "captain"
	// Table holds the table name of the team in the database.
	Table = "teams"
	// CaptainTable is the table that holds the captain relation/edge.
	CaptainTable = "teams"
	// CaptainInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CaptainInverseTable = "users"
	// CaptainColumn is the table column denoting the captain relation/edge.
	CaptainColumn = "team_captain"
)

// Columns holds all SQL columns for team fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldLogo,
	FieldConfirmedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "teams"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"team_captain",
	"user_playing_for",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// LogoValidator is a validator for the "logo" field. It is called by the builders before save.
	LogoValidator func([]byte) error
)

// OrderOption defines the ordering options for the Team queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByConfirmedAt orders the results by the confirmed_at field.
func ByConfirmedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfirmedAt, opts...).ToFunc()
}

// ByCaptainField orders the results by captain field.
func ByCaptainField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCaptainStep(), sql.OrderByField(field, opts...))
	}
}
func newCaptainStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CaptainInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CaptainTable, CaptainColumn),
	)
}
