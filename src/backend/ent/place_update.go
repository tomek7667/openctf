// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"openctfbackend/ent/contest"
	"openctfbackend/ent/place"
	"openctfbackend/ent/predicate"
	"openctfbackend/ent/team"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaceUpdate is the builder for updating Place entities.
type PlaceUpdate struct {
	config
	hooks    []Hook
	mutation *PlaceMutation
}

// Where appends a list predicates to the PlaceUpdate builder.
func (pu *PlaceUpdate) Where(ps ...predicate.Place) *PlaceUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetTeamName sets the "team_name" field.
func (pu *PlaceUpdate) SetTeamName(s string) *PlaceUpdate {
	pu.mutation.SetTeamName(s)
	return pu
}

// SetNillableTeamName sets the "team_name" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableTeamName(s *string) *PlaceUpdate {
	if s != nil {
		pu.SetTeamName(*s)
	}
	return pu
}

// SetPlace sets the "place" field.
func (pu *PlaceUpdate) SetPlace(i int) *PlaceUpdate {
	pu.mutation.ResetPlace()
	pu.mutation.SetPlace(i)
	return pu
}

// SetNillablePlace sets the "place" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillablePlace(i *int) *PlaceUpdate {
	if i != nil {
		pu.SetPlace(*i)
	}
	return pu
}

// AddPlace adds i to the "place" field.
func (pu *PlaceUpdate) AddPlace(i int) *PlaceUpdate {
	pu.mutation.AddPlace(i)
	return pu
}

// SetContestPoints sets the "contest_points" field.
func (pu *PlaceUpdate) SetContestPoints(f float64) *PlaceUpdate {
	pu.mutation.ResetContestPoints()
	pu.mutation.SetContestPoints(f)
	return pu
}

// SetNillableContestPoints sets the "contest_points" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableContestPoints(f *float64) *PlaceUpdate {
	if f != nil {
		pu.SetContestPoints(*f)
	}
	return pu
}

// AddContestPoints adds f to the "contest_points" field.
func (pu *PlaceUpdate) AddContestPoints(f float64) *PlaceUpdate {
	pu.mutation.AddContestPoints(f)
	return pu
}

// ClearContestPoints clears the value of the "contest_points" field.
func (pu *PlaceUpdate) ClearContestPoints() *PlaceUpdate {
	pu.mutation.ClearContestPoints()
	return pu
}

// SetOpenctfPoints sets the "openctf_points" field.
func (pu *PlaceUpdate) SetOpenctfPoints(f float64) *PlaceUpdate {
	pu.mutation.ResetOpenctfPoints()
	pu.mutation.SetOpenctfPoints(f)
	return pu
}

// SetNillableOpenctfPoints sets the "openctf_points" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableOpenctfPoints(f *float64) *PlaceUpdate {
	if f != nil {
		pu.SetOpenctfPoints(*f)
	}
	return pu
}

// AddOpenctfPoints adds f to the "openctf_points" field.
func (pu *PlaceUpdate) AddOpenctfPoints(f float64) *PlaceUpdate {
	pu.mutation.AddOpenctfPoints(f)
	return pu
}

// ClearOpenctfPoints clears the value of the "openctf_points" field.
func (pu *PlaceUpdate) ClearOpenctfPoints() *PlaceUpdate {
	pu.mutation.ClearOpenctfPoints()
	return pu
}

// SetAssignedWeightPoints sets the "assigned_weight_points" field.
func (pu *PlaceUpdate) SetAssignedWeightPoints(i int) *PlaceUpdate {
	pu.mutation.ResetAssignedWeightPoints()
	pu.mutation.SetAssignedWeightPoints(i)
	return pu
}

// SetNillableAssignedWeightPoints sets the "assigned_weight_points" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableAssignedWeightPoints(i *int) *PlaceUpdate {
	if i != nil {
		pu.SetAssignedWeightPoints(*i)
	}
	return pu
}

// AddAssignedWeightPoints adds i to the "assigned_weight_points" field.
func (pu *PlaceUpdate) AddAssignedWeightPoints(i int) *PlaceUpdate {
	pu.mutation.AddAssignedWeightPoints(i)
	return pu
}

// SetContestID sets the "contest" edge to the Contest entity by ID.
func (pu *PlaceUpdate) SetContestID(id int) *PlaceUpdate {
	pu.mutation.SetContestID(id)
	return pu
}

// SetContest sets the "contest" edge to the Contest entity.
func (pu *PlaceUpdate) SetContest(c *Contest) *PlaceUpdate {
	return pu.SetContestID(c.ID)
}

// SetAssociatedTeamID sets the "associated_team" edge to the Team entity by ID.
func (pu *PlaceUpdate) SetAssociatedTeamID(id int) *PlaceUpdate {
	pu.mutation.SetAssociatedTeamID(id)
	return pu
}

// SetNillableAssociatedTeamID sets the "associated_team" edge to the Team entity by ID if the given value is not nil.
func (pu *PlaceUpdate) SetNillableAssociatedTeamID(id *int) *PlaceUpdate {
	if id != nil {
		pu = pu.SetAssociatedTeamID(*id)
	}
	return pu
}

// SetAssociatedTeam sets the "associated_team" edge to the Team entity.
func (pu *PlaceUpdate) SetAssociatedTeam(t *Team) *PlaceUpdate {
	return pu.SetAssociatedTeamID(t.ID)
}

// Mutation returns the PlaceMutation object of the builder.
func (pu *PlaceUpdate) Mutation() *PlaceMutation {
	return pu.mutation
}

// ClearContest clears the "contest" edge to the Contest entity.
func (pu *PlaceUpdate) ClearContest() *PlaceUpdate {
	pu.mutation.ClearContest()
	return pu
}

// ClearAssociatedTeam clears the "associated_team" edge to the Team entity.
func (pu *PlaceUpdate) ClearAssociatedTeam() *PlaceUpdate {
	pu.mutation.ClearAssociatedTeam()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlaceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlaceUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlaceUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlaceUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PlaceUpdate) check() error {
	if v, ok := pu.mutation.TeamName(); ok {
		if err := place.TeamNameValidator(v); err != nil {
			return &ValidationError{Name: "team_name", err: fmt.Errorf(`ent: validator failed for field "Place.team_name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Place(); ok {
		if err := place.PlaceValidator(v); err != nil {
			return &ValidationError{Name: "place", err: fmt.Errorf(`ent: validator failed for field "Place.place": %w`, err)}
		}
	}
	if v, ok := pu.mutation.ContestPoints(); ok {
		if err := place.ContestPointsValidator(v); err != nil {
			return &ValidationError{Name: "contest_points", err: fmt.Errorf(`ent: validator failed for field "Place.contest_points": %w`, err)}
		}
	}
	if v, ok := pu.mutation.OpenctfPoints(); ok {
		if err := place.OpenctfPointsValidator(v); err != nil {
			return &ValidationError{Name: "openctf_points", err: fmt.Errorf(`ent: validator failed for field "Place.openctf_points": %w`, err)}
		}
	}
	if pu.mutation.ContestCleared() && len(pu.mutation.ContestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Place.contest"`)
	}
	return nil
}

func (pu *PlaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(place.Table, place.Columns, sqlgraph.NewFieldSpec(place.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.TeamName(); ok {
		_spec.SetField(place.FieldTeamName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Place(); ok {
		_spec.SetField(place.FieldPlace, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedPlace(); ok {
		_spec.AddField(place.FieldPlace, field.TypeInt, value)
	}
	if value, ok := pu.mutation.ContestPoints(); ok {
		_spec.SetField(place.FieldContestPoints, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedContestPoints(); ok {
		_spec.AddField(place.FieldContestPoints, field.TypeFloat64, value)
	}
	if pu.mutation.ContestPointsCleared() {
		_spec.ClearField(place.FieldContestPoints, field.TypeFloat64)
	}
	if value, ok := pu.mutation.OpenctfPoints(); ok {
		_spec.SetField(place.FieldOpenctfPoints, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedOpenctfPoints(); ok {
		_spec.AddField(place.FieldOpenctfPoints, field.TypeFloat64, value)
	}
	if pu.mutation.OpenctfPointsCleared() {
		_spec.ClearField(place.FieldOpenctfPoints, field.TypeFloat64)
	}
	if value, ok := pu.mutation.AssignedWeightPoints(); ok {
		_spec.SetField(place.FieldAssignedWeightPoints, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedAssignedWeightPoints(); ok {
		_spec.AddField(place.FieldAssignedWeightPoints, field.TypeInt, value)
	}
	if pu.mutation.ContestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   place.ContestTable,
			Columns: []string{place.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ContestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   place.ContestTable,
			Columns: []string{place.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AssociatedTeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   place.AssociatedTeamTable,
			Columns: []string{place.AssociatedTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AssociatedTeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   place.AssociatedTeamTable,
			Columns: []string{place.AssociatedTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{place.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlaceUpdateOne is the builder for updating a single Place entity.
type PlaceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlaceMutation
}

// SetTeamName sets the "team_name" field.
func (puo *PlaceUpdateOne) SetTeamName(s string) *PlaceUpdateOne {
	puo.mutation.SetTeamName(s)
	return puo
}

// SetNillableTeamName sets the "team_name" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableTeamName(s *string) *PlaceUpdateOne {
	if s != nil {
		puo.SetTeamName(*s)
	}
	return puo
}

// SetPlace sets the "place" field.
func (puo *PlaceUpdateOne) SetPlace(i int) *PlaceUpdateOne {
	puo.mutation.ResetPlace()
	puo.mutation.SetPlace(i)
	return puo
}

// SetNillablePlace sets the "place" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillablePlace(i *int) *PlaceUpdateOne {
	if i != nil {
		puo.SetPlace(*i)
	}
	return puo
}

// AddPlace adds i to the "place" field.
func (puo *PlaceUpdateOne) AddPlace(i int) *PlaceUpdateOne {
	puo.mutation.AddPlace(i)
	return puo
}

// SetContestPoints sets the "contest_points" field.
func (puo *PlaceUpdateOne) SetContestPoints(f float64) *PlaceUpdateOne {
	puo.mutation.ResetContestPoints()
	puo.mutation.SetContestPoints(f)
	return puo
}

// SetNillableContestPoints sets the "contest_points" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableContestPoints(f *float64) *PlaceUpdateOne {
	if f != nil {
		puo.SetContestPoints(*f)
	}
	return puo
}

// AddContestPoints adds f to the "contest_points" field.
func (puo *PlaceUpdateOne) AddContestPoints(f float64) *PlaceUpdateOne {
	puo.mutation.AddContestPoints(f)
	return puo
}

// ClearContestPoints clears the value of the "contest_points" field.
func (puo *PlaceUpdateOne) ClearContestPoints() *PlaceUpdateOne {
	puo.mutation.ClearContestPoints()
	return puo
}

// SetOpenctfPoints sets the "openctf_points" field.
func (puo *PlaceUpdateOne) SetOpenctfPoints(f float64) *PlaceUpdateOne {
	puo.mutation.ResetOpenctfPoints()
	puo.mutation.SetOpenctfPoints(f)
	return puo
}

// SetNillableOpenctfPoints sets the "openctf_points" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableOpenctfPoints(f *float64) *PlaceUpdateOne {
	if f != nil {
		puo.SetOpenctfPoints(*f)
	}
	return puo
}

// AddOpenctfPoints adds f to the "openctf_points" field.
func (puo *PlaceUpdateOne) AddOpenctfPoints(f float64) *PlaceUpdateOne {
	puo.mutation.AddOpenctfPoints(f)
	return puo
}

// ClearOpenctfPoints clears the value of the "openctf_points" field.
func (puo *PlaceUpdateOne) ClearOpenctfPoints() *PlaceUpdateOne {
	puo.mutation.ClearOpenctfPoints()
	return puo
}

// SetAssignedWeightPoints sets the "assigned_weight_points" field.
func (puo *PlaceUpdateOne) SetAssignedWeightPoints(i int) *PlaceUpdateOne {
	puo.mutation.ResetAssignedWeightPoints()
	puo.mutation.SetAssignedWeightPoints(i)
	return puo
}

// SetNillableAssignedWeightPoints sets the "assigned_weight_points" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableAssignedWeightPoints(i *int) *PlaceUpdateOne {
	if i != nil {
		puo.SetAssignedWeightPoints(*i)
	}
	return puo
}

// AddAssignedWeightPoints adds i to the "assigned_weight_points" field.
func (puo *PlaceUpdateOne) AddAssignedWeightPoints(i int) *PlaceUpdateOne {
	puo.mutation.AddAssignedWeightPoints(i)
	return puo
}

// SetContestID sets the "contest" edge to the Contest entity by ID.
func (puo *PlaceUpdateOne) SetContestID(id int) *PlaceUpdateOne {
	puo.mutation.SetContestID(id)
	return puo
}

// SetContest sets the "contest" edge to the Contest entity.
func (puo *PlaceUpdateOne) SetContest(c *Contest) *PlaceUpdateOne {
	return puo.SetContestID(c.ID)
}

// SetAssociatedTeamID sets the "associated_team" edge to the Team entity by ID.
func (puo *PlaceUpdateOne) SetAssociatedTeamID(id int) *PlaceUpdateOne {
	puo.mutation.SetAssociatedTeamID(id)
	return puo
}

// SetNillableAssociatedTeamID sets the "associated_team" edge to the Team entity by ID if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableAssociatedTeamID(id *int) *PlaceUpdateOne {
	if id != nil {
		puo = puo.SetAssociatedTeamID(*id)
	}
	return puo
}

// SetAssociatedTeam sets the "associated_team" edge to the Team entity.
func (puo *PlaceUpdateOne) SetAssociatedTeam(t *Team) *PlaceUpdateOne {
	return puo.SetAssociatedTeamID(t.ID)
}

// Mutation returns the PlaceMutation object of the builder.
func (puo *PlaceUpdateOne) Mutation() *PlaceMutation {
	return puo.mutation
}

// ClearContest clears the "contest" edge to the Contest entity.
func (puo *PlaceUpdateOne) ClearContest() *PlaceUpdateOne {
	puo.mutation.ClearContest()
	return puo
}

// ClearAssociatedTeam clears the "associated_team" edge to the Team entity.
func (puo *PlaceUpdateOne) ClearAssociatedTeam() *PlaceUpdateOne {
	puo.mutation.ClearAssociatedTeam()
	return puo
}

// Where appends a list predicates to the PlaceUpdate builder.
func (puo *PlaceUpdateOne) Where(ps ...predicate.Place) *PlaceUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlaceUpdateOne) Select(field string, fields ...string) *PlaceUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Place entity.
func (puo *PlaceUpdateOne) Save(ctx context.Context) (*Place, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlaceUpdateOne) SaveX(ctx context.Context) *Place {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlaceUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlaceUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PlaceUpdateOne) check() error {
	if v, ok := puo.mutation.TeamName(); ok {
		if err := place.TeamNameValidator(v); err != nil {
			return &ValidationError{Name: "team_name", err: fmt.Errorf(`ent: validator failed for field "Place.team_name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Place(); ok {
		if err := place.PlaceValidator(v); err != nil {
			return &ValidationError{Name: "place", err: fmt.Errorf(`ent: validator failed for field "Place.place": %w`, err)}
		}
	}
	if v, ok := puo.mutation.ContestPoints(); ok {
		if err := place.ContestPointsValidator(v); err != nil {
			return &ValidationError{Name: "contest_points", err: fmt.Errorf(`ent: validator failed for field "Place.contest_points": %w`, err)}
		}
	}
	if v, ok := puo.mutation.OpenctfPoints(); ok {
		if err := place.OpenctfPointsValidator(v); err != nil {
			return &ValidationError{Name: "openctf_points", err: fmt.Errorf(`ent: validator failed for field "Place.openctf_points": %w`, err)}
		}
	}
	if puo.mutation.ContestCleared() && len(puo.mutation.ContestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Place.contest"`)
	}
	return nil
}

func (puo *PlaceUpdateOne) sqlSave(ctx context.Context) (_node *Place, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(place.Table, place.Columns, sqlgraph.NewFieldSpec(place.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Place.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, place.FieldID)
		for _, f := range fields {
			if !place.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != place.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.TeamName(); ok {
		_spec.SetField(place.FieldTeamName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Place(); ok {
		_spec.SetField(place.FieldPlace, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedPlace(); ok {
		_spec.AddField(place.FieldPlace, field.TypeInt, value)
	}
	if value, ok := puo.mutation.ContestPoints(); ok {
		_spec.SetField(place.FieldContestPoints, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedContestPoints(); ok {
		_spec.AddField(place.FieldContestPoints, field.TypeFloat64, value)
	}
	if puo.mutation.ContestPointsCleared() {
		_spec.ClearField(place.FieldContestPoints, field.TypeFloat64)
	}
	if value, ok := puo.mutation.OpenctfPoints(); ok {
		_spec.SetField(place.FieldOpenctfPoints, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedOpenctfPoints(); ok {
		_spec.AddField(place.FieldOpenctfPoints, field.TypeFloat64, value)
	}
	if puo.mutation.OpenctfPointsCleared() {
		_spec.ClearField(place.FieldOpenctfPoints, field.TypeFloat64)
	}
	if value, ok := puo.mutation.AssignedWeightPoints(); ok {
		_spec.SetField(place.FieldAssignedWeightPoints, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedAssignedWeightPoints(); ok {
		_spec.AddField(place.FieldAssignedWeightPoints, field.TypeInt, value)
	}
	if puo.mutation.ContestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   place.ContestTable,
			Columns: []string{place.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ContestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   place.ContestTable,
			Columns: []string{place.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AssociatedTeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   place.AssociatedTeamTable,
			Columns: []string{place.AssociatedTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AssociatedTeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   place.AssociatedTeamTable,
			Columns: []string{place.AssociatedTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Place{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{place.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
