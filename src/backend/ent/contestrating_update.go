// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"openctfbackend/ent/contestrating"
	"openctfbackend/ent/predicate"
	"openctfbackend/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContestRatingUpdate is the builder for updating ContestRating entities.
type ContestRatingUpdate struct {
	config
	hooks    []Hook
	mutation *ContestRatingMutation
}

// Where appends a list predicates to the ContestRatingUpdate builder.
func (cru *ContestRatingUpdate) Where(ps ...predicate.ContestRating) *ContestRatingUpdate {
	cru.mutation.Where(ps...)
	return cru
}

// SetRating sets the "rating" field.
func (cru *ContestRatingUpdate) SetRating(i int) *ContestRatingUpdate {
	cru.mutation.ResetRating()
	cru.mutation.SetRating(i)
	return cru
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (cru *ContestRatingUpdate) SetNillableRating(i *int) *ContestRatingUpdate {
	if i != nil {
		cru.SetRating(*i)
	}
	return cru
}

// AddRating adds i to the "rating" field.
func (cru *ContestRatingUpdate) AddRating(i int) *ContestRatingUpdate {
	cru.mutation.AddRating(i)
	return cru
}

// SetRelevant sets the "relevant" field.
func (cru *ContestRatingUpdate) SetRelevant(b bool) *ContestRatingUpdate {
	cru.mutation.SetRelevant(b)
	return cru
}

// SetNillableRelevant sets the "relevant" field if the given value is not nil.
func (cru *ContestRatingUpdate) SetNillableRelevant(b *bool) *ContestRatingUpdate {
	if b != nil {
		cru.SetRelevant(*b)
	}
	return cru
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cru *ContestRatingUpdate) SetUserID(id int) *ContestRatingUpdate {
	cru.mutation.SetUserID(id)
	return cru
}

// SetUser sets the "user" edge to the User entity.
func (cru *ContestRatingUpdate) SetUser(u *User) *ContestRatingUpdate {
	return cru.SetUserID(u.ID)
}

// SetContestID sets the "contest" edge to the User entity by ID.
func (cru *ContestRatingUpdate) SetContestID(id int) *ContestRatingUpdate {
	cru.mutation.SetContestID(id)
	return cru
}

// SetContest sets the "contest" edge to the User entity.
func (cru *ContestRatingUpdate) SetContest(u *User) *ContestRatingUpdate {
	return cru.SetContestID(u.ID)
}

// Mutation returns the ContestRatingMutation object of the builder.
func (cru *ContestRatingUpdate) Mutation() *ContestRatingMutation {
	return cru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cru *ContestRatingUpdate) ClearUser() *ContestRatingUpdate {
	cru.mutation.ClearUser()
	return cru
}

// ClearContest clears the "contest" edge to the User entity.
func (cru *ContestRatingUpdate) ClearContest() *ContestRatingUpdate {
	cru.mutation.ClearContest()
	return cru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cru *ContestRatingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cru.sqlSave, cru.mutation, cru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cru *ContestRatingUpdate) SaveX(ctx context.Context) int {
	affected, err := cru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cru *ContestRatingUpdate) Exec(ctx context.Context) error {
	_, err := cru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cru *ContestRatingUpdate) ExecX(ctx context.Context) {
	if err := cru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cru *ContestRatingUpdate) check() error {
	if v, ok := cru.mutation.Rating(); ok {
		if err := contestrating.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "ContestRating.rating": %w`, err)}
		}
	}
	if cru.mutation.UserCleared() && len(cru.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ContestRating.user"`)
	}
	if cru.mutation.ContestCleared() && len(cru.mutation.ContestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ContestRating.contest"`)
	}
	return nil
}

func (cru *ContestRatingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(contestrating.Table, contestrating.Columns, sqlgraph.NewFieldSpec(contestrating.FieldID, field.TypeInt))
	if ps := cru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cru.mutation.Rating(); ok {
		_spec.SetField(contestrating.FieldRating, field.TypeInt, value)
	}
	if value, ok := cru.mutation.AddedRating(); ok {
		_spec.AddField(contestrating.FieldRating, field.TypeInt, value)
	}
	if value, ok := cru.mutation.Relevant(); ok {
		_spec.SetField(contestrating.FieldRelevant, field.TypeBool, value)
	}
	if cru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestrating.UserTable,
			Columns: []string{contestrating.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestrating.UserTable,
			Columns: []string{contestrating.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cru.mutation.ContestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestrating.ContestTable,
			Columns: []string{contestrating.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.ContestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestrating.ContestTable,
			Columns: []string{contestrating.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contestrating.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cru.mutation.done = true
	return n, nil
}

// ContestRatingUpdateOne is the builder for updating a single ContestRating entity.
type ContestRatingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContestRatingMutation
}

// SetRating sets the "rating" field.
func (cruo *ContestRatingUpdateOne) SetRating(i int) *ContestRatingUpdateOne {
	cruo.mutation.ResetRating()
	cruo.mutation.SetRating(i)
	return cruo
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (cruo *ContestRatingUpdateOne) SetNillableRating(i *int) *ContestRatingUpdateOne {
	if i != nil {
		cruo.SetRating(*i)
	}
	return cruo
}

// AddRating adds i to the "rating" field.
func (cruo *ContestRatingUpdateOne) AddRating(i int) *ContestRatingUpdateOne {
	cruo.mutation.AddRating(i)
	return cruo
}

// SetRelevant sets the "relevant" field.
func (cruo *ContestRatingUpdateOne) SetRelevant(b bool) *ContestRatingUpdateOne {
	cruo.mutation.SetRelevant(b)
	return cruo
}

// SetNillableRelevant sets the "relevant" field if the given value is not nil.
func (cruo *ContestRatingUpdateOne) SetNillableRelevant(b *bool) *ContestRatingUpdateOne {
	if b != nil {
		cruo.SetRelevant(*b)
	}
	return cruo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cruo *ContestRatingUpdateOne) SetUserID(id int) *ContestRatingUpdateOne {
	cruo.mutation.SetUserID(id)
	return cruo
}

// SetUser sets the "user" edge to the User entity.
func (cruo *ContestRatingUpdateOne) SetUser(u *User) *ContestRatingUpdateOne {
	return cruo.SetUserID(u.ID)
}

// SetContestID sets the "contest" edge to the User entity by ID.
func (cruo *ContestRatingUpdateOne) SetContestID(id int) *ContestRatingUpdateOne {
	cruo.mutation.SetContestID(id)
	return cruo
}

// SetContest sets the "contest" edge to the User entity.
func (cruo *ContestRatingUpdateOne) SetContest(u *User) *ContestRatingUpdateOne {
	return cruo.SetContestID(u.ID)
}

// Mutation returns the ContestRatingMutation object of the builder.
func (cruo *ContestRatingUpdateOne) Mutation() *ContestRatingMutation {
	return cruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cruo *ContestRatingUpdateOne) ClearUser() *ContestRatingUpdateOne {
	cruo.mutation.ClearUser()
	return cruo
}

// ClearContest clears the "contest" edge to the User entity.
func (cruo *ContestRatingUpdateOne) ClearContest() *ContestRatingUpdateOne {
	cruo.mutation.ClearContest()
	return cruo
}

// Where appends a list predicates to the ContestRatingUpdate builder.
func (cruo *ContestRatingUpdateOne) Where(ps ...predicate.ContestRating) *ContestRatingUpdateOne {
	cruo.mutation.Where(ps...)
	return cruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cruo *ContestRatingUpdateOne) Select(field string, fields ...string) *ContestRatingUpdateOne {
	cruo.fields = append([]string{field}, fields...)
	return cruo
}

// Save executes the query and returns the updated ContestRating entity.
func (cruo *ContestRatingUpdateOne) Save(ctx context.Context) (*ContestRating, error) {
	return withHooks(ctx, cruo.sqlSave, cruo.mutation, cruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cruo *ContestRatingUpdateOne) SaveX(ctx context.Context) *ContestRating {
	node, err := cruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cruo *ContestRatingUpdateOne) Exec(ctx context.Context) error {
	_, err := cruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruo *ContestRatingUpdateOne) ExecX(ctx context.Context) {
	if err := cruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cruo *ContestRatingUpdateOne) check() error {
	if v, ok := cruo.mutation.Rating(); ok {
		if err := contestrating.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "ContestRating.rating": %w`, err)}
		}
	}
	if cruo.mutation.UserCleared() && len(cruo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ContestRating.user"`)
	}
	if cruo.mutation.ContestCleared() && len(cruo.mutation.ContestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ContestRating.contest"`)
	}
	return nil
}

func (cruo *ContestRatingUpdateOne) sqlSave(ctx context.Context) (_node *ContestRating, err error) {
	if err := cruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(contestrating.Table, contestrating.Columns, sqlgraph.NewFieldSpec(contestrating.FieldID, field.TypeInt))
	id, ok := cruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ContestRating.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contestrating.FieldID)
		for _, f := range fields {
			if !contestrating.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contestrating.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cruo.mutation.Rating(); ok {
		_spec.SetField(contestrating.FieldRating, field.TypeInt, value)
	}
	if value, ok := cruo.mutation.AddedRating(); ok {
		_spec.AddField(contestrating.FieldRating, field.TypeInt, value)
	}
	if value, ok := cruo.mutation.Relevant(); ok {
		_spec.SetField(contestrating.FieldRelevant, field.TypeBool, value)
	}
	if cruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestrating.UserTable,
			Columns: []string{contestrating.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestrating.UserTable,
			Columns: []string{contestrating.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cruo.mutation.ContestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestrating.ContestTable,
			Columns: []string{contestrating.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.ContestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contestrating.ContestTable,
			Columns: []string{contestrating.ContestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ContestRating{config: cruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contestrating.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cruo.mutation.done = true
	return _node, nil
}
