// Code generated by ent, DO NOT EDIT.

package contest

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the contest type in the database.
	Label = "contest"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldRules holds the string denoting the rules field in the database.
	FieldRules = "rules"
	// FieldPrizes holds the string denoting the prizes field in the database.
	FieldPrizes = "prizes"
	// FieldStart holds the string denoting the start field in the database.
	FieldStart = "start"
	// FieldEnd holds the string denoting the end field in the database.
	FieldEnd = "end"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldCtftimeID holds the string denoting the ctftime_id field in the database.
	FieldCtftimeID = "ctftime_id"
	// FieldAssignedWeightPoints holds the string denoting the assigned_weight_points field in the database.
	FieldAssignedWeightPoints = "assigned_weight_points"
	// EdgeOrganizers holds the string denoting the organizers edge name in mutations.
	EdgeOrganizers = "organizers"
	// EdgePlaces holds the string denoting the places edge name in mutations.
	EdgePlaces = "places"
	// Table holds the table name of the contest in the database.
	Table = "contests"
	// OrganizersTable is the table that holds the organizers relation/edge.
	OrganizersTable = "contests"
	// OrganizersInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	OrganizersInverseTable = "teams"
	// OrganizersColumn is the table column denoting the organizers relation/edge.
	OrganizersColumn = "contest_organizers"
	// PlacesTable is the table that holds the places relation/edge.
	PlacesTable = "places"
	// PlacesInverseTable is the table name for the Place entity.
	// It exists in this package in order to avoid circular dependency with the "place" package.
	PlacesInverseTable = "places"
	// PlacesColumn is the table column denoting the places relation/edge.
	PlacesColumn = "associated_contest_id"
)

// Columns holds all SQL columns for contest fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldRules,
	FieldPrizes,
	FieldStart,
	FieldEnd,
	FieldURL,
	FieldCtftimeID,
	FieldAssignedWeightPoints,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "contests"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"contest_organizers",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
	// DefaultAssignedWeightPoints holds the default value on creation for the "assigned_weight_points" field.
	DefaultAssignedWeightPoints int
)

// OrderOption defines the ordering options for the Contest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByRules orders the results by the rules field.
func ByRules(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRules, opts...).ToFunc()
}

// ByPrizes orders the results by the prizes field.
func ByPrizes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrizes, opts...).ToFunc()
}

// ByStart orders the results by the start field.
func ByStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStart, opts...).ToFunc()
}

// ByEnd orders the results by the end field.
func ByEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnd, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByCtftimeID orders the results by the ctftime_id field.
func ByCtftimeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCtftimeID, opts...).ToFunc()
}

// ByAssignedWeightPoints orders the results by the assigned_weight_points field.
func ByAssignedWeightPoints(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssignedWeightPoints, opts...).ToFunc()
}

// ByOrganizersField orders the results by organizers field.
func ByOrganizersField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizersStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlacesCount orders the results by places count.
func ByPlacesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlacesStep(), opts...)
	}
}

// ByPlaces orders the results by places terms.
func ByPlaces(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlacesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOrganizersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrganizersTable, OrganizersColumn),
	)
}
func newPlacesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlacesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PlacesTable, PlacesColumn),
	)
}
