// Code generated by ent, DO NOT EDIT.

package contest

import (
	"openctfbackend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldDescription, v))
}

// Rules applies equality check predicate on the "rules" field. It's identical to RulesEQ.
func Rules(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldRules, v))
}

// Prizes applies equality check predicate on the "prizes" field. It's identical to PrizesEQ.
func Prizes(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldPrizes, v))
}

// Start applies equality check predicate on the "start" field. It's identical to StartEQ.
func Start(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldStart, v))
}

// End applies equality check predicate on the "end" field. It's identical to EndEQ.
func End(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldEnd, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldURL, v))
}

// CtftimeID applies equality check predicate on the "ctftime_id" field. It's identical to CtftimeIDEQ.
func CtftimeID(v int) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldCtftimeID, v))
}

// AssignedWeightPoints applies equality check predicate on the "assigned_weight_points" field. It's identical to AssignedWeightPointsEQ.
func AssignedWeightPoints(v int) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldAssignedWeightPoints, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Contest {
	return predicate.Contest(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Contest {
	return predicate.Contest(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Contest {
	return predicate.Contest(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Contest {
	return predicate.Contest(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Contest {
	return predicate.Contest(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Contest {
	return predicate.Contest(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Contest {
	return predicate.Contest(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Contest {
	return predicate.Contest(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Contest {
	return predicate.Contest(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Contest {
	return predicate.Contest(sql.FieldContainsFold(FieldDescription, v))
}

// RulesEQ applies the EQ predicate on the "rules" field.
func RulesEQ(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldRules, v))
}

// RulesNEQ applies the NEQ predicate on the "rules" field.
func RulesNEQ(v string) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldRules, v))
}

// RulesIn applies the In predicate on the "rules" field.
func RulesIn(vs ...string) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldRules, vs...))
}

// RulesNotIn applies the NotIn predicate on the "rules" field.
func RulesNotIn(vs ...string) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldRules, vs...))
}

// RulesGT applies the GT predicate on the "rules" field.
func RulesGT(v string) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldRules, v))
}

// RulesGTE applies the GTE predicate on the "rules" field.
func RulesGTE(v string) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldRules, v))
}

// RulesLT applies the LT predicate on the "rules" field.
func RulesLT(v string) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldRules, v))
}

// RulesLTE applies the LTE predicate on the "rules" field.
func RulesLTE(v string) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldRules, v))
}

// RulesContains applies the Contains predicate on the "rules" field.
func RulesContains(v string) predicate.Contest {
	return predicate.Contest(sql.FieldContains(FieldRules, v))
}

// RulesHasPrefix applies the HasPrefix predicate on the "rules" field.
func RulesHasPrefix(v string) predicate.Contest {
	return predicate.Contest(sql.FieldHasPrefix(FieldRules, v))
}

// RulesHasSuffix applies the HasSuffix predicate on the "rules" field.
func RulesHasSuffix(v string) predicate.Contest {
	return predicate.Contest(sql.FieldHasSuffix(FieldRules, v))
}

// RulesIsNil applies the IsNil predicate on the "rules" field.
func RulesIsNil() predicate.Contest {
	return predicate.Contest(sql.FieldIsNull(FieldRules))
}

// RulesNotNil applies the NotNil predicate on the "rules" field.
func RulesNotNil() predicate.Contest {
	return predicate.Contest(sql.FieldNotNull(FieldRules))
}

// RulesEqualFold applies the EqualFold predicate on the "rules" field.
func RulesEqualFold(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEqualFold(FieldRules, v))
}

// RulesContainsFold applies the ContainsFold predicate on the "rules" field.
func RulesContainsFold(v string) predicate.Contest {
	return predicate.Contest(sql.FieldContainsFold(FieldRules, v))
}

// PrizesEQ applies the EQ predicate on the "prizes" field.
func PrizesEQ(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldPrizes, v))
}

// PrizesNEQ applies the NEQ predicate on the "prizes" field.
func PrizesNEQ(v string) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldPrizes, v))
}

// PrizesIn applies the In predicate on the "prizes" field.
func PrizesIn(vs ...string) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldPrizes, vs...))
}

// PrizesNotIn applies the NotIn predicate on the "prizes" field.
func PrizesNotIn(vs ...string) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldPrizes, vs...))
}

// PrizesGT applies the GT predicate on the "prizes" field.
func PrizesGT(v string) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldPrizes, v))
}

// PrizesGTE applies the GTE predicate on the "prizes" field.
func PrizesGTE(v string) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldPrizes, v))
}

// PrizesLT applies the LT predicate on the "prizes" field.
func PrizesLT(v string) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldPrizes, v))
}

// PrizesLTE applies the LTE predicate on the "prizes" field.
func PrizesLTE(v string) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldPrizes, v))
}

// PrizesContains applies the Contains predicate on the "prizes" field.
func PrizesContains(v string) predicate.Contest {
	return predicate.Contest(sql.FieldContains(FieldPrizes, v))
}

// PrizesHasPrefix applies the HasPrefix predicate on the "prizes" field.
func PrizesHasPrefix(v string) predicate.Contest {
	return predicate.Contest(sql.FieldHasPrefix(FieldPrizes, v))
}

// PrizesHasSuffix applies the HasSuffix predicate on the "prizes" field.
func PrizesHasSuffix(v string) predicate.Contest {
	return predicate.Contest(sql.FieldHasSuffix(FieldPrizes, v))
}

// PrizesIsNil applies the IsNil predicate on the "prizes" field.
func PrizesIsNil() predicate.Contest {
	return predicate.Contest(sql.FieldIsNull(FieldPrizes))
}

// PrizesNotNil applies the NotNil predicate on the "prizes" field.
func PrizesNotNil() predicate.Contest {
	return predicate.Contest(sql.FieldNotNull(FieldPrizes))
}

// PrizesEqualFold applies the EqualFold predicate on the "prizes" field.
func PrizesEqualFold(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEqualFold(FieldPrizes, v))
}

// PrizesContainsFold applies the ContainsFold predicate on the "prizes" field.
func PrizesContainsFold(v string) predicate.Contest {
	return predicate.Contest(sql.FieldContainsFold(FieldPrizes, v))
}

// StartEQ applies the EQ predicate on the "start" field.
func StartEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldStart, v))
}

// StartNEQ applies the NEQ predicate on the "start" field.
func StartNEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldStart, v))
}

// StartIn applies the In predicate on the "start" field.
func StartIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldStart, vs...))
}

// StartNotIn applies the NotIn predicate on the "start" field.
func StartNotIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldStart, vs...))
}

// StartGT applies the GT predicate on the "start" field.
func StartGT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldStart, v))
}

// StartGTE applies the GTE predicate on the "start" field.
func StartGTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldStart, v))
}

// StartLT applies the LT predicate on the "start" field.
func StartLT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldStart, v))
}

// StartLTE applies the LTE predicate on the "start" field.
func StartLTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldStart, v))
}

// EndEQ applies the EQ predicate on the "end" field.
func EndEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldEnd, v))
}

// EndNEQ applies the NEQ predicate on the "end" field.
func EndNEQ(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldEnd, v))
}

// EndIn applies the In predicate on the "end" field.
func EndIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldEnd, vs...))
}

// EndNotIn applies the NotIn predicate on the "end" field.
func EndNotIn(vs ...time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldEnd, vs...))
}

// EndGT applies the GT predicate on the "end" field.
func EndGT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldEnd, v))
}

// EndGTE applies the GTE predicate on the "end" field.
func EndGTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldEnd, v))
}

// EndLT applies the LT predicate on the "end" field.
func EndLT(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldEnd, v))
}

// EndLTE applies the LTE predicate on the "end" field.
func EndLTE(v time.Time) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldEnd, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Contest {
	return predicate.Contest(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Contest {
	return predicate.Contest(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Contest {
	return predicate.Contest(sql.FieldHasSuffix(FieldURL, v))
}

// URLIsNil applies the IsNil predicate on the "url" field.
func URLIsNil() predicate.Contest {
	return predicate.Contest(sql.FieldIsNull(FieldURL))
}

// URLNotNil applies the NotNil predicate on the "url" field.
func URLNotNil() predicate.Contest {
	return predicate.Contest(sql.FieldNotNull(FieldURL))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Contest {
	return predicate.Contest(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Contest {
	return predicate.Contest(sql.FieldContainsFold(FieldURL, v))
}

// CtftimeIDEQ applies the EQ predicate on the "ctftime_id" field.
func CtftimeIDEQ(v int) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldCtftimeID, v))
}

// CtftimeIDNEQ applies the NEQ predicate on the "ctftime_id" field.
func CtftimeIDNEQ(v int) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldCtftimeID, v))
}

// CtftimeIDIn applies the In predicate on the "ctftime_id" field.
func CtftimeIDIn(vs ...int) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldCtftimeID, vs...))
}

// CtftimeIDNotIn applies the NotIn predicate on the "ctftime_id" field.
func CtftimeIDNotIn(vs ...int) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldCtftimeID, vs...))
}

// CtftimeIDGT applies the GT predicate on the "ctftime_id" field.
func CtftimeIDGT(v int) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldCtftimeID, v))
}

// CtftimeIDGTE applies the GTE predicate on the "ctftime_id" field.
func CtftimeIDGTE(v int) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldCtftimeID, v))
}

// CtftimeIDLT applies the LT predicate on the "ctftime_id" field.
func CtftimeIDLT(v int) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldCtftimeID, v))
}

// CtftimeIDLTE applies the LTE predicate on the "ctftime_id" field.
func CtftimeIDLTE(v int) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldCtftimeID, v))
}

// CtftimeIDIsNil applies the IsNil predicate on the "ctftime_id" field.
func CtftimeIDIsNil() predicate.Contest {
	return predicate.Contest(sql.FieldIsNull(FieldCtftimeID))
}

// CtftimeIDNotNil applies the NotNil predicate on the "ctftime_id" field.
func CtftimeIDNotNil() predicate.Contest {
	return predicate.Contest(sql.FieldNotNull(FieldCtftimeID))
}

// AssignedWeightPointsEQ applies the EQ predicate on the "assigned_weight_points" field.
func AssignedWeightPointsEQ(v int) predicate.Contest {
	return predicate.Contest(sql.FieldEQ(FieldAssignedWeightPoints, v))
}

// AssignedWeightPointsNEQ applies the NEQ predicate on the "assigned_weight_points" field.
func AssignedWeightPointsNEQ(v int) predicate.Contest {
	return predicate.Contest(sql.FieldNEQ(FieldAssignedWeightPoints, v))
}

// AssignedWeightPointsIn applies the In predicate on the "assigned_weight_points" field.
func AssignedWeightPointsIn(vs ...int) predicate.Contest {
	return predicate.Contest(sql.FieldIn(FieldAssignedWeightPoints, vs...))
}

// AssignedWeightPointsNotIn applies the NotIn predicate on the "assigned_weight_points" field.
func AssignedWeightPointsNotIn(vs ...int) predicate.Contest {
	return predicate.Contest(sql.FieldNotIn(FieldAssignedWeightPoints, vs...))
}

// AssignedWeightPointsGT applies the GT predicate on the "assigned_weight_points" field.
func AssignedWeightPointsGT(v int) predicate.Contest {
	return predicate.Contest(sql.FieldGT(FieldAssignedWeightPoints, v))
}

// AssignedWeightPointsGTE applies the GTE predicate on the "assigned_weight_points" field.
func AssignedWeightPointsGTE(v int) predicate.Contest {
	return predicate.Contest(sql.FieldGTE(FieldAssignedWeightPoints, v))
}

// AssignedWeightPointsLT applies the LT predicate on the "assigned_weight_points" field.
func AssignedWeightPointsLT(v int) predicate.Contest {
	return predicate.Contest(sql.FieldLT(FieldAssignedWeightPoints, v))
}

// AssignedWeightPointsLTE applies the LTE predicate on the "assigned_weight_points" field.
func AssignedWeightPointsLTE(v int) predicate.Contest {
	return predicate.Contest(sql.FieldLTE(FieldAssignedWeightPoints, v))
}

// HasOrganizers applies the HasEdge predicate on the "organizers" edge.
func HasOrganizers() predicate.Contest {
	return predicate.Contest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OrganizersTable, OrganizersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizersWith applies the HasEdge predicate on the "organizers" edge with a given conditions (other predicates).
func HasOrganizersWith(preds ...predicate.Team) predicate.Contest {
	return predicate.Contest(func(s *sql.Selector) {
		step := newOrganizersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlaces applies the HasEdge predicate on the "places" edge.
func HasPlaces() predicate.Contest {
	return predicate.Contest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PlacesTable, PlacesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlacesWith applies the HasEdge predicate on the "places" edge with a given conditions (other predicates).
func HasPlacesWith(preds ...predicate.Place) predicate.Contest {
	return predicate.Contest(func(s *sql.Selector) {
		step := newPlacesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Contest) predicate.Contest {
	return predicate.Contest(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Contest) predicate.Contest {
	return predicate.Contest(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Contest) predicate.Contest {
	return predicate.Contest(sql.NotPredicates(p))
}
